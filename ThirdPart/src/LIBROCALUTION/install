#!/bin/bash
# rocALUTION : See https://github.com/ROCmSoftwarePlatform/rocALUTION
[ "$TRUST_ROCALUTION" = "" ] && echo "TRUST_ROCALUTION empty!" && exit -1

# On clone avant d'utiliser externalpackages dans le futur:
[ ! -d rocALUTION ] && git clone https://github.com/ROCmSoftwarePlatform/rocALUTION.git
cd rocALUTION
git checkout eedff42d4badff

# Build sans OpenMP et avec backend host si rocm pas installe:
SUPPORT_HIP=ON && [ "$ROCM_PATH" = "" ]        && SUPPORT_HIP=OFF && echo "Warning, ROCm non installe donc pas de support GPU."
SUPPORT_MPI=ON && [ "$TRUST_DISABLE_MPI" = 1 ] && SUPPORT_MPI=OFF
mkdir -p build
cd build
cmake .. -DSUPPORT_HIP=$SUPPORT_HIP -DROCM_PATH=$ROCM_PATH -DSUPPORT_OMP=OFF -DSUPPORT_MPI=$SUPPORT_MPI -DCMAKE_INSTALL_PREFIX=$TRUST_ROCALUTION || exit -1
$TRUST_MAKE

# Install et copie des samples
make install || exit -1
cp -r clients $TRUST_ROCALUTION/clients

# Lancement du benchmark rocALUTION sur une petite matrice type de TRUST
cd $TRUST_ROCALUTION/clients/staging
gunzip -c $TRUST_ROOT/ThirdPart/src/LIBROCALUTION/VDF_10x10x10.mtx.gz > VDF_10x10x10.mtx
./benchmark VDF_10x10x10.mtx 2>&1 | tee benchmark.log
echo "`pwd`/benchmark.log created."

# Nettoyage
rm -r -f $TRUST_ROOT/ThirdPart/src/LIBROCALUTION/rocALUTION
exit 0
