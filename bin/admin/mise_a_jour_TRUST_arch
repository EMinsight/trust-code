#!/bin/bash
# Compilation d'une version sur une machine distante
exit_()
{
   #####################################################################################################
   # Copie des CR sur ftp si la machine TMA ne peut acceder a cette machine donc lancement par crontab # 
   #####################################################################################################
   command=`basename $0`
   if [ "`crontab -l 2>/dev/null | grep $command`" != "" ]
   then
      export TRUST_FTP=`cat $TRUST_ROOT/env/TRUST.env | awk -F= '/TRUST_FTP=/ {print $2}'`
      export TRUST_Awk=awk
      export SECRET=`cat $TRUST_ROOT/bin/admin/connect_ftp | awk -F= '/SECRET=/ {print $2}'`
      ###############################################################
      # On verifie que le ~/.netrc est bien configure
      # C'est necessaire pour le fonctionnement de ls_ftp, cp_ftp,...
      ###############################################################
      ligne="machine $TRUST_FTP login anonymous password $QUI"
      grep "$ligne" ~/.netrc 1>/dev/null 2>&1 || echo $ligne >> ~/.netrc
      CR=$SECRET/../CR
      $TRUST_ROOT/bin/admin/cp_ftp ~/CR_$HOST_BUILD $CR
      $TRUST_ROOT/bin/admin/cp_ftp $TRUST_ROOT/compile_*opt* $CR
      $TRUST_ROOT/bin/admin/cp_ftp $TRUST_ROOT/MAKE_* $CR
      $TRUST_ROOT/bin/admin/cp_ftp $TRUST_ROOT/PERF_* $CR
   fi 
   exit $1
}
gunzip_()
{
   gunzip -f $1
}

########################################################
# Fonction pour activer les droits d'utilisation/lecture
########################################################
change_droits()
{
  echo "change_droits"
  # On donne les droits d'ecriture a user
  # On donne les droits de lecture a toute le monde sauf hors intra CEA
  if [ "`grep intra.cea.fr /etc/* 2>/dev/null`" != "" ]
  then
     chmod -R u+w,gou+r . 1>/dev/null 2>&1
  else
     chmod -R u+w,gu+r,o-rwx . 1>/dev/null 2>&1
  fi
}

#########
# DEBUT #
#########
# Mise a jour des sources par:
# sftp de paquets .tar.gz de la machine TMA vers la machine meme  (sftp=1)
# rsync de la machine TMA vers la machine meme                    (rsync=1 mode par defaut)
# git depuis la machine meme                                      (git=1)   => no updated with TRUST
# kill: permet de detruire tous les processes lances par ce script
rsync=1
sftp=""  && [ "$1" = "-sftp"  ] && sftp=1  && rsync="" 
git=""   && [ "$1" = "-git"   ] && git=1   && rsync=""
kill=""  && [ "$1" = "-kill"  ] && kill=1

# Initialisation environnement
file=~/.profile
if [ -f $file ] 
then
   . $file 1>/dev/null
else
   file=~/.bashrc && [ -f $file ] && . $file 1>/dev/null
fi

######################
# Variable ECHO_OPTS #
######################
[ "`echo -e`" != "-e" ] && ECHO_OPTS="-e"
export LC_ALL=C

#################
# Variable HOST #
#################
# HOST is given by the directory version $WORKBASE if possible
# It is now possible to build several version on the same machine. Eg:
# $WORKBASEcallisto
# $WORKBASEcallisto-intel
# ...
# ~/.ssh/config need to be change to recognize the "new" hosts 
VERSION=`pwd`
VERSION=${VERSION%/TRUST/bin/admin}
VERSION=`basename $VERSION`
HOST=${VERSION#$WORKBASE}
if [ $VERSION = $HOST ]
then
   # Pas evident d'appeler HOST.env tant que HOST n'est
   # pas lui meme connu (ex: machines CCRT) donc
   # on laisse pour le moment:
   HOST=`hostname | awk -F. '{print $1}'`
   [ "${HOST#callisto}" != $HOST ] && HOST=callisto
   [ "${HOST#ceres2}"   != $HOST ] && HOST=ceres2
   [ "${HOST#mezel}"    != $HOST ] && HOST=mezel
   [ "${HOST#cobalt}"   != $HOST ] && HOST=cobalt
   [ "${HOST#irene}"    != $HOST ] && HOST=irene-ccrt

fi

WHERE=$HOME && [ "$WORKDIR" != "" ] && WHERE=$WORKDIR
QUI=trust@cea.fr
export version=$WHERE/$WORKBASE$HOST

[ "$git" = 1 ]&& echo "-git mode no supported with TRUST for the moment!" && exit -1
if [ "$git" = 1 ] && [ ! -d $version/TRUST/.git ]
then
   # First install
   git --version
   [ $? != 0 ] && echo "git should be installed." && exit -1
   git clone $TRUST_GIT_OFFICIAL $version"/TRUST"
   [ ! -d $version/TRUST/.git ] && echo "$version/TRUST/.git directory not created !" && exit -1
fi
[ ! -d $version ] && echo "$version directory not found" && exit -1

export TRUST_ROOT=$version/TRUST
[ ! -d $TRUST_ROOT ] && mkdir $TRUST_ROOT
DIPHA_ROOT=$version/Diphasique
cd $TRUST_ROOT

# Command run with -kill option:
# Generally called from recupere_TRUST_arch
if [ "$kill" = 1 ]
then
   # Find the father process
   fathers=`ps -efl | grep mise_a_jour_TRUST_arch | grep -v grep | grep -v kill | awk '{print $4}'`
   for father in $fathers
   do
      # List/suspend/kill all childrens of $father if this one is still running:
      kill -0 $father 1>/dev/null 2>&1
      if [ $? = 0 ]
      then
	 pids=`$TRUST_ROOT/bin/baltik/share/baltik/bin/portability/list_pid_et_fils.sh $father`
	 echo "Trying to kill mise_a_jour_TRUST_arch (pid $father) processes: "$pids
	 # Suspend
	 for pid in $pids
	 do
	    ps -efl | grep $pid | grep -v grep
	    kill -SIGSTOP $pid
	 done
	 # Kill
	 for pid in $pids
	 do
	    kill -9 $pid
	 done   
      fi
   done
   exit 0
fi

if [ "$git" = 1 ]
then
   git_branch=fix_$HOST
   git --version
   [ $? != 0 ] && echo "git should be installed." && exit -1
   # List branchs:
   git branch -a
   git checkout -b $git_branch origin/master 1>/dev/null 2>&1
   git config --global user.email "trust@cea.fr"
   git config --global user.name `whoami`
   git fetch origin || exit -1
   git rebase origin/master || exit -1
fi

##################################
# Debut effectif de la mise a jour
##################################
echo "Usage: `basename $0` [-rsync|-sftp|-kill]"
# Variable NUIT
export NUIT=0 && [ `date '+%H'` -ge 18 ] || [ `date '+%H'` -lt 8 ] && NUIT=1 

if [ "`ps -efl | grep make | grep TRUST | grep -v grep | grep "triou "`" != "" ] || [ "`ps -efl | grep make | grep TRUST | grep -v grep | grep "mr757596 "`" != "" ] 
then
   # mail_ command not found at this moment
   echo $ECHO_OPTS "\n\nSorry, $QUI is now running on the $HOST machine... Try later." #| mail_ $QUI
   #[ $NUIT = 0 ] && exit_
fi

###########################
# Debut de la mise a jour #
###########################
echo "----------------------------------------------------------------------------"
echo "Start the update on $HOST the `date` (NIGHT=$NUIT) ..."
echo "----------------------------------------------------------------------------"
qui=`basename $HOME`
too_much_tasks=`ps -u $qui 2>/dev/null | grep $WORKBASE | wc -l | awk '{if ($0>40) print 1;else print 0}'`

# Place memoire occupee par la version
du -s -m -L $version 2>/dev/null | awk '{print $1/1000" GBytes "$2}'

# Place memoire encore disponible
if [ -f $TRUST_ROOT/bin/KSH/dd.ksh ]
then
   echo "Disk space available:"
   space_need=5
   cd $version
   $TRUST_ROOT/bin/KSH/dd.ksh -space_need $space_need
   err=$?
   # Previens si pas acces de place pour installer la version (5Go necessaire)
   # si l'on n'est pas sur une virtual box
   if [ "$err" != 0 ] && [ "$git" = 0 ]
   then
      $TRUST_ROOT/bin/KSH/dd.ksh -space_need $space_need | $TRUST_ROOT/bin/admin/mail_ -s\"[mise_a_jour_TRUST_arch] Disk full $space_need Go sur $HOST\" trust@cea.fr
      echo "Disk full $space_need Go on $HOST : we leave mise_a_jour_TRUST_arch."
      exit_ -1
   fi
fi
[ "$sftp" = 1 ] && [ ! -f $version/TRUST.tar.gz ] && echo "No update on $HOST because $version/TRUST.tar.gz missing." && exit_

# Creation des repertoires necessaires :
[ ! -d $TRUST_ROOT/env ] && mkdir $TRUST_ROOT/env

echo -e "1,$ s?export LIBGL_ALWAYS_INDIRECT=1 # To avoid VisIt crashes on $HOST??g\nw" | ed ~/.perso_TRUST.env 1>/dev/null 2>&1

cd $TRUST_ROOT
# On fait de la place
\rm -r -f lib/TRUST*.a

##########################################
# On modifie les droits des fichiers avant
##########################################
cd $version
change_droits
cd - 1>/dev/null 2>&1

#MODULES="TRUST Diphasique"
MODULES="TRUST"
for MODULE in $MODULES
do
   ROOT=$version/$MODULE
   cd $ROOT
   #######################################################################################
   # Sauvegarde du binaire sous $WORKDIR (car $DMFDIR est partage par nickel/tantale/chrome)
   # et sous ~/test/NUIT si on n'est pas sur une machine du CCRT (voir pbs place disque)
   #######################################################################################
   exec=`ls exec/$MODULE*"_opt" 2>/dev/null | head -1`
   if [ "$exec" != "" ]
   then
      DATE=`date '+%d%m%y' -r $exec`
      if [ "$WORKDIR" != "" ] && [ -d $WORKDIR ]
      then      
         mkdir $WORKDIR/NUIT 2>/dev/null
         for binaire in `ls $ROOT/exec/$MODULE*opt 2>/dev/null`
         do
            gzip -c $binaire > $WORKDIR/NUIT/`basename $binaire`.$DATE.gz
	    echo "Binary backup: $WORKDIR/NUIT/`basename $binaire`.$DATE.gz"
         done
      else
         mkdir -p ~/test/NUIT 2>/dev/null
         for binaire in `ls $ROOT/exec/$MODULE*opt 2>/dev/null`
         do
            gzip -c $binaire > ~/test/NUIT/`basename $binaire`.$DATE.gz
	    echo "Binary backup: ~/test/NUIT/`basename $binaire`.$DATE.gz"
         done   
      fi
   fi   
   
   ###############################################
   # Methode de mise a jour des sources par paquet
   ###############################################
   if [ "$sftp" = 1 ]
   then
      cd $version
      date
      #####################################
      # Paquet $MODULE : traitement special
      #####################################
      if [ -f $version/$MODULE.tar.gz ]
      then
	 #tar tvf $MODULE.tar.gz 
	 tar xvfz $MODULE.tar.gz 1>/dev/null
	 rm -f $MODULE.tar.gz
      fi
   fi
done
##########################################
# On modifie les droits des fichiers apres
##########################################
cd $version
change_droits
cd - 1>/dev/null 2>&1

#################################
# Lance la configuration du Noyau
#################################
cd $TRUST_ROOT

HOST_tmp=$HOST
echo "-----------------------------------------"
date

################################################
# Pour forcer des options sur certaines machines
################################################
#option_configure=""
export TRUST_BUILD_IN_TMP=1
option_configure=" -disable-ccache"
# PETSc with CUDA for GPU (needs GNU compiler for PETSc, confirmed in petsc-dev december 2013) 
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-force_petsc_have_cuda" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -force_petsc_have_cuda -c++=g++ -cc=gcc -fc=gfortran"
# PETSc with OpenMP 
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-force_petsc_have_openmp" | grep ^$HOST"\."`" != "" ] 	&& option_configure=$option_configure" -force_petsc_have_openmp"
# without PETSc 
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-petsc" | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -disable-petsc"
# OpenMPI
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-force_old_openmpi" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -force_old_openmpi"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-force_provided_openmpi" | grep ^$HOST"\."`" != "" ] 	&& option_configure=$option_configure" -force_provided_openmpi"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-force_latest_openmpi" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -force_latest_openmpi"
# MPICH
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-force_provided_mpich" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -force_provided_mpich"
# OpenMPI ancien sur la machine ou l'on construit le binaire sinon ne trouve pas un fichier en local
[ "`$TRUST_ROOT/bin/admin/liste_machines "\get_binary" | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -force_old_openmpi"
# Compilation minimale avec -disable
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable " | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -disable-mpi -without-visit -without-doc -disable-plot2d"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-mpi " | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -disable-mpi"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-optionals" | grep ^$HOST"\."`" != "" ] 		&& option_configure=" -disable-optionals"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-check_sources" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -disable-check_sources"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-mpiio" | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -disable-mpiio"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-valgrind" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -disable-valgrind"
# Salome
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-download-salome" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -download-salome"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-download " | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -download-salome -download-visit"
# VisIt
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-download-visit" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -download-visit"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-without-visit" | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -without-visit"
# Gmsh
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-gmsh" | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -disable-gmsh"
# IHM
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-plot2d" | grep ^$HOST"\."`" != "" ] 		&& option_configure=$option_configure" -disable-plot2d"
# Documentation
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-without-pdflatex" | grep ^$HOST"\."`" != "" ]		&& option_configure=$option_configure" -without-pdflatex"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-without-doc" | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -without-doc"
# Compilation sans GUI tools
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-tools" | grep ^$HOST"\."`" != "" ] 			&& option_configure=$option_configure" -disable-gnuplot -disable-tcl_tk -disable-gmsh -disable-plot2d -without-doc -without-visit"
# Compilateur clang
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-clang" | grep ^$HOST"\."`" != "" ]				&& option_configure=$option_configure" -c++=/usr/bin/clang++ -cc=/usr/bin/clang"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-clang38" | grep ^$HOST"\."`" != "" ]			&& option_configure=$option_configure" -c++=/usr/lib/llvm-3.8/bin/clang++ -cc=/usr/lib/llvm-3.8/bin/clang"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-clang39" | grep ^$HOST"\."`" != "" ]			&& option_configure=$option_configure" -c++=/usr/lib/llvm-3.9/bin/clang++ -cc=/usr/lib/llvm-3.9/bin/clang"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-clang40" | grep ^$HOST"\."`" != "" ]			&& option_configure=$option_configure" -c++=/usr/lib/llvm-4.0/bin/clang++ -cc=/usr/lib/llvm-4.0/bin/clang"
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-force_even_unsupported" | grep ^$HOST"\."`" != "" ]		&& option_configure=$option_configure" -force_even_unsupported"
# Compilation en INT64
[ "`$TRUST_ROOT/bin/admin/liste_machines "\-build_64_bit" | grep ^$HOST"\."`" != "" ]			&& option_configure=$option_configure" -with-64-bit-indices"

########################
# Lancement du configure
######################## 
echo "--------------------------------------------------------"
echo "Configure on $HOST at "`date '+%H:%M:%S'`
echo "--------------------------------------------------------"
# [ "`$TRUST_ROOT/bin/admin/liste_machines "\-build64" | grep ^$HOST"\."`" != "" ] && [ ! -f GO ] && ./bin/BUILD64/GO
./configure $option_configure
[ $? != 0 ] && echo "Error in the configure... We leave." && exit_ -1

HOST=$HOST_tmp

###############################
# Initialize TRUST environment
###############################
source env_TRUST.sh # necessaire pour connaitre le nom de $TRUST_TMP
rm -r -f $TRUST_TMP # suppression des anciens log sur machine distante
source env_TRUST.sh 1>/dev/null 2>&1 # necessaire pour creer le dossier $TRUST_TMP

echo "--------------------------------------------------------"
echo "End configure on $HOST_BUILD at "`date '+%H:%M:%S'`
echo "--------------------------------------------------------"

# Envoi d'un mail si trop de taches detectees
[ $too_much_tasks = 1 ] && ps -efl 2>/dev/null | grep $qui | grep $WORKBASE | mail_ -s\"[mise_a_jour_TRUST_arch] Attention, trop de taches sur $HOST\" $TRUST_MAIL

# Teste la connection a ftp.cea.fr
teste_ftp ftp.cea.fr anonymous $TRUST_MAIL

##################################
# Lance la compilation des MODULES
##################################
for MODULE in $MODULES
do
   ROOT=$version/$MODULE
   cd $ROOT
   [ $MODULE = TRUST ] && code=TRUST && exec=$ROOT/exec/TRUST$COMM$OPT && source env_TRUST.sh 
   [ $MODULE = Diphasique ] && code=dipha && exec=$ROOT/exec/dipha$COMM$OPT && . bin/Init_Dipha 
# Nettoyage
   [ ! $SHARE_LIBS ] && rm -f $ROOT/lib/lib*.s? 
# Supprime les lib*.a inutiles de Diphasique
   if [ $MODULE = Diphasique ]
   then
      for lib in `\ls lib/lib*.a | grep -v $TRUST_ARCH_CC 2>/dev/null`
      do
         rm -f $lib
      done
   fi
   rm -f $ROOT/compile_*
   rm -f $ROOT/MAKE_*
   rm -f $ROOT/PERF_*
   PERF=$ROOT/PERF_$code$COMM$OPT"_"$TRUST_ARCH"_"$HOST_BUILD

   echo "--------------------------------------------------------"
   echo "Compilation of $MODULE $TRUST_VERSION on $HOST_BUILD at "`date '+%H:%M:%S'`
   echo "--------------------------------------------------------"
   cd $ROOT

   #############
   # compilation
   #############
   # export utiles si ce script est lance en soumission de job sur clusters dans le script envoie_TRUST_arch
   export USE_MPIRUN=1
   [ "$HOST" = irene-ccrt ] && export project="dendm2s"
   # Changement option en -g -O3 afin d'utiliser cachegrind
   [ "`liste_machines "\-cachegrind" | grep ^$HOST_BUILD"\."`" != "" ] && echo $ECHO_OPTS "1,$ s?-O3?-g -O3?g\nw" | ed $TRUST_ROOT/env/make.linux_g++3_opt
   make && cp compile_$code$COMM$OPT"_"$TRUST_ARCH"_"$HOST_BUILD".log" compile.tmp && make opt_avx
   err_exe_compile=$?
   cat compile_$code$COMM$OPT"_"$TRUST_ARCH"_"$HOST_BUILD".log" >> compile.tmp && mv compile.tmp compile_$code$COMM$OPT"_"$TRUST_ARCH"_"$HOST_BUILD".log"
   [ "`grep BUILD_EXEC=OK compile_$code$COMM$OPT"_"$TRUST_ARCH"_"$HOST_BUILD.log`" != "" ] && err_exe_compile=0
   err_tool_compile=1
   [ $err_exe_compile = 0 ] && [ "`grep BUILD_TOOLS=OK compile_$code$COMM$OPT"_"$TRUST_ARCH"_"$HOST_BUILD.log`" != "" ] && err_tool_compile=0
   if [ $err_tool_compile = 0 ]
   then
      rm -rf $TRUST_ROOT/build/ 
      echo "The build directory is deleted."
   else
      echo "The build directory is NOT deleted."
   fi
   if [ $MODULE = TRUST ]
   then
      echo "==========================="
      ######################
      # MED est il compile ?
      ######################
      if [ -f $TRUST_MED_ROOT/lib/libmed.a ]
      then
	 echo "MED=OK"
      else 
	 echo "MED=KO"
      fi
      ##############################
      # MEDCOUPLING est il compile ?
      ##############################
      if [ -f $TRUST_MEDCOUPLING_ROOT/lib/libmedcoupling.a ]
      then
	 echo "MEDCOUPLING=OK"
      else 
	 echo "MEDCOUPLING=KO"
      fi
      ########################
      # PETSC est il compile ?
      ########################
      if [ -f $PETSC_ROOT/$TRUST_ARCH"_opt"/lib/libpetsc.a ]
      then
	 echo "PETSC=OK"
      else
	 echo "PETSC=KO"
      fi	
      ########################
      # VisIt est il compile ?
      ########################
      if [ ! -d $TRUST_ROOT/exec/VisIt/bin ]
      then
         echo "VisIt=NOT"
      elif [ ! -f $TRUST_ROOT/exec/VisIt/bin/visit ]
      then
         echo "VisIt=KO"
      else
         visit_help=`source $TRUST_ROOT/env_TRUST.sh 1>/dev/null 2>&1;$TRUST_ROOT/exec/VisIt/bin/visit -help 2>&1`
         if [ $? = 0 ]
         then
            if [ "`ls $TRUST_ROOT/exec/VisIt/current/*/bin/engine_par 2>/dev/null`" != "" ]
            then
               echo "VisIt=PAR"
            else
               echo "VisIt=SEQ"
	    fi
         else
            echo "VisIt=KO"
	    $TRUST_ROOT/exec/VisIt/bin/visit -help
	 fi
      fi
      ######################
      # MPI est il compile ?
      ######################
      MPI_NATIF=0
      if [ "${MPI_ROOT#$TRUST_ROOT}" != "$MPI_ROOT" ]
      then
         $Mpirun --version 2>&1 | $TRUST_Awk '/Open MPI/ {print "MPI=OpenMPI "$NF} /Version:/ {print "MPI=MPICH "$NF}'
      elif [ "$MPI_ROOT" != "" ]
      then
	 MPI_VERSION=`$Mpirun --version 2>&1 | $TRUST_Awk '/Open MPI/ {print "OpenMPI "$NF} /Version:/ {print "MPICH "$NF} /Intel\(R\) MPI/ {print "Intel MPI "$8}'`
         if [ "$MPI_VERSION" != "" ]
         then
            echo "MPI=MPI natif: $MPI_VERSION"
	 else
            echo "MPI=MPI natif: $MPI_ROOT"
	 fi
         MPI_NATIF=1
      else
         echo "MPI="
      fi
   fi
   # On cree les exec.tar
   (cd exec;tar cf exec.tar *_opt 2>/dev/null;gzip -f exec.tar)
   # Operations en + :
   # Force la creation de la lib dipha en attendant de revoir tout ca....
   [ $MODULE = Diphasique ] && cree_Dipha_opt_a
   # Build other TRUST binaries during the night only if main build is OK:
   testcpu3d=0
   if [ $NUIT = 1 ] && [ $MODULE = TRUST ] && [ $err_exe_compile = 0 ]
   then
      for TYPE in prof gcov opt_avx
      do
          case $TYPE in
	  prof) OPT="_opt_pg"; binary=$exec_pg; MODE="prof";;
	  gcov) OPT="_opt_gcov"; binary=$exec_gcov; MODE="gcov";;
	  opt_avx) OPT="_opt_avx"; binary=$exec_avx; MODE="avx";;
          *) echo $TYPE not coded in $0;  exit -1 ;;
	  esac;

         if [ "`liste_machines "\-$MODE" | grep ^$HOST_BUILD"\."`" != "" ]
	 then
            echo "--------------------------------------------------------"
	    echo "Compilation -$MODE (OPT=$OPT) at `date` ..."
	    MAKE_LOG=$ROOT/MAKE_$code$COMM"_"$TYPE"_"$TRUST_ARCH"_"$HOST_BUILD
	    echo "See $MAKE_LOG"
	    echo "Binary: $binary"
	    cd $ROOT
            echo "TRUST make on $HOST_BUILD the `date` ...">$MAKE_LOG
            echo>>$MAKE_LOG
	    make $TYPE 1>>$MAKE_LOG 2>&1
	    # On teste le binaire
	    #echo>>$MAKE_LOG
            #echo "--------------------------------------------------------" >> $MAKE_LOG
	    #echo>>$MAKE_LOG
	    echo "trust -check cpu_3D"
	    testcpu3d=1
	    exec=$binary trust -check cpu_3D #1>>$MAKE_LOG 2>&1
	    if [ $? != 0 ]
	    then
	       #echo "Error, see $MAKE_LOG!"
	       echo "CPU_3D=KO"
	       testcpu3d=-1
	       [ "$TYPE" != "opt_avx" ] && exit -1
	    else
	       echo "CPU_3D=OK"
	    fi
	 else
	    rm -r -f $TRUST_ROOT/MonoDir$COMM$OPT
	 fi
      done
      if [ $testcpu3d == 0 ]
      then
         binary=$exec_debug
         echo "--------------------------------------------------------"
         echo "Binary: $binary" 
	 cd $ROOT
	 echo "trust -check cpu_3D"
	 testcpu3d=1
	 exec=$binary trust -check cpu_3D #1>/dev/null 2>&1
	 if [ $? != 0 ]
	 then
	    echo "CPU_3D=KO"
	    testcpu3d=-1
	    #exit -1
	 else
	    echo "CPU_3D=OK"
	 fi
      fi
      OPT="_opt"
   fi
   echo "--------------------------------------------------------"
   echo "End compilations on $HOST_BUILD at "`date '+%H:%M:%S'` # Message important pour le run de Validation/Etudes 
   echo "--------------------------------------------------------"
   export USE_MPIRUN=1
   # Remplissage des caracteristiques de la machine :
   echo "TRUST performance on $HOST_BUILD the `date` ...">$PERF
   echo "--------------------------------------------------------" >> $PERF
   echo "hostname="$HOST_BUILD >> $PERF
   #os=`uname -s` && [ $TRUST_ARCH = linux ] && [ -f /etc/issue ] && os=`awk -F"(" '(NF>0) {gsub("Welcome to ","",$1);print $1}' /etc/issue | head -1`
   os=`uname -s` && [ $TRUST_ARCH = linux ]
   for file in /etc/system-release /etc/release /etc/issue.net /etc/issue
   do
      if [ -f $file ]
      then
         os=`awk -F"(" '(NF>0) {gsub("Welcome to ","",$1);print $1}' $file | head -1`
	 break
      fi
   done
   echo "os="$os >> $PERF
   kernel=`uname -r` && [ $TRUST_ARCH = RS6000 ] && kernel=`uname -r`
   echo "release="$kernel >> $PERF
   model=`uname -m` && [ $TRUST_ARCH = RS6000 ] && model=`uname -a | awk '{print $4"."$3}'`
   echo "model=$model" >> $PERF
   echo "nb_procs=$TRUST_NB_PROCS" >> $PERF
   echo "ram="`		[ -f /proc/meminfo ] && awk '/MemTotal/ {print int($2/1000/1000)}' /proc/meminfo` >> $PERF
   echo "cache="`	[ -f /proc/cpuinfo ] && awk '/cache size/ {print $4}' /proc/cpuinfo | tail -1` >> $PERF
   echo "freq="`	[ -f /proc/cpuinfo ] && awk '/cpu MHz/ {print int($4)}' /proc/cpuinfo | tail -1` >> $PERF
   #echo "vga="`lspci 2>/dev/null | awk -F: '/VGA/ {print $3}'` >> $PERF
   # Mieux pour NVidia
   echo "nvidia=`cat /proc/driver/nvidia/cards/0 2>/dev/null | awk -F: '/Model/ {print $2}'` `nvidia-smi -a 2>/dev/null | awk -F: '/Driver/ {print $2}'`" >> $PERF
   CC_PERF="CC "`basename $TRUST_CC_BASE`
   if [ "$TRUST_VERSION_GNU" != "" ]
   then
      CC_PERF=$CC_PERF" "$TRUST_VERSION_GNU
   else
      CC_PERF=$CC_PERF" "`$TRUST_CC_BASE --version 2>&1 | head -1 | $TRUST_Awk '{if ($3=="Linux)") print $4;else print $3}'`
   fi
   echo $CC_PERF >> $PERF
   # On verifie si on a obtenu un executable teste 
   if [ -f $exec ] && [ "`touch vide.data;trust vide 2>&1 | grep TRUST;rm -f vide.data`" != "" ]
   then
      taille=`\ls -la $exec | $TRUST_Awk '{print int($5/1024/1024)}'`
      type=`ldd $exec 2>/dev/null | grep lib | $TRUST_Awk 'END {type="Statique";if (NR>50) type="Dynamique";else if (NR>0) type="Semi-Statique";print type}'`
      if [ $type = "Statique" ] || [ $type = "Semi-Statique" ]
      then
         echo "sizeMo "$taille" "$type >> $PERF
      elif [ $type = "Dynamique" ]
      then
         sl=`\ls -la $ROOT/lib/lib*.s* 2>/dev/null | $TRUST_Awk 'BEGIN {i=0} {i+=$5} END {print i/1000}'`
         sl=`echo $ECHO_OPTS "scale=1\n$sl/1000" | bc -l`
         echo "sizeMo "$taille"+"$sl" "$type >> $PERF
      fi
      echo "--------------------------------------------------------" >> $PERF
            
      if [ $MODULE = TRUST ]
      then
	 cd $TRUST_ROOT
	 source env_TRUST.sh 1>/dev/null 2>&1
         
	 ###################
	 # Test du MPI livre
	 ###################
	 rep=$TRUST_ROOT/lib/src/LIBMPI/${COMM#_}/examples/basic
	 if [ -d $rep ]
	 then
	    cd $rep
	    mpir=../../bin/mpirun
	    [ -f $mpir ] && $mpir -np 2 cpi
	 fi
         
	 ####################
	 # Verifie makedepend
	 ####################
	 mes="Test of makedepend at "`date '+%H:%M:%S'`
	 rm -f toto
	 rm -f $TRUST_TMP/.tmp;touch $TRUST_TMP/.tmp;makedepend -f$TRUST_TMP/.tmp
	 if [ "`cat $TRUST_TMP/.tmp | grep -i delete`" != "" ]
	 then
	    mes=$mes"\nOK"
	 else
	    mes=$mes"\nError"
	 fi
	 echo $ECHO_OPTS $mes
	 
	 #####################
	 # Test de l'atelier #
	 #####################
	 (
	    cd $TRUST_ROOT
	    # On relance les tests de l'atelier et on le met comme condition de livraison
            echo "--------------------------------------------------------" 
	    echo "Test atelier operation at "`date '+%H:%M:%S'`
	    export rep_dev=$TRUST_TMP/atelier_test_$HOST_BUILD
	    rm -r -f $rep_dev
	    mkdir $rep_dev
	    # $TRUST_ROOT/bin/HTML/cree_Atelier.html
	    cd $rep_dev
	    # Modication d'un .cpp du Kernel:
	    sed "s?Construction of?TEST_ATELIER_OK Construction of?g" $TRUST_ROOT/src/Kernel/Geometrie/Octree.cpp > Octree.cpp
	    chmod +w Octree.cpp
	    # On desactive MED pour tester correctement "make module"
	    # touch med++.h
	    # Modification d'un .h du Kernel:
	    cp $TRUST_ROOT/src/Kernel/Framework/Postraitement.h .
	    chmod +w Postraitement.h
	    echo " " >> Postraitement.h
	    # On efface le repertoire
	    rm -r -f $rep_dev/exec_opt
	    echo 2 | Makeatelier.sccs 1>Makeatelier.sccs.log 2>&1
	    cd $rep_dev/exec_opt
	    # Passage d'un cas test du Kernel:
	    cp $TRUST_TESTS/Reference/Kernel/Kernel.data exec_opt.data
	    exec=$rep_dev/exec_opt/TRUST$COMM$OPT
	    OK="KO" && rm -f err && [ -f $exec ] && USE_MPIRUN=1 trust exec_opt 1>atelier.log 2>&1 && OK=`$TRUST_Awk 'BEGIN {mes="KO"} /TEST_ATELIER_OK/ { mes="OK" } END {print mes}' atelier.log`
	    # On verifie qu'il est alle jusqu'a la fin aussi...
	    [ "`grep 'Arret des processes.' atelier.log`" = "" ] && OK=KO
	    # Nouveau test pour l'atelier, il doit etre capable de creer un objet partage pour certains projets Baltik
  	    if [ $OK = OK ]
	    then
	       echo "Test shared object creation in the atelier..."
	       make module
	       [ $? != 0 ] && OK="KO"
	    fi
	    # Affichage
	    echo "ATELIER="$OK
	    cd $TRUST_ROOT
	    [ $OK != "KO" ] && rm -r -f $rep_dev	
         )	 
	 #############################
	 # On lance un test Valgrind #
	 #############################
	 if [ "`liste_machines "\-disable-optionals" | grep ^$HOST_BUILD"\."`" = "" ]
	 then
            echo "--------------------------------------------------------" 
	    echo "Test case in valgrind mode at "`date '+%H:%M:%S'`
            if [ "`liste_machines "\-disable-valgrind" | grep ^$HOST_BUILD"\."`" != "" ] || [ $MPI_NATIF = 1 ]
            then
	      OK="NOT"
            else
 	      Build=$TRUST_ROOT/build/Validation/Valgrind;
              [ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build};
              cd $Build;
              case="upwind"
	      OK="KO" && rm -f testval.log *$case.val 1>/dev/null 2>&1 && (echo $case | $TRUST_ROOT/Validation/Valgrind/testval 1>testval.log 2>&1)
	      if [ "$TRUST_DISABLE_MPI" = "0" ]
	      then
	        OK=`$TRUST_Awk 'BEGIN {mes="KO";ok=0} /...OK/ {ok++} END {if (ok==3) mes="OK"; print mes}' testval.log`
	      else
	        OK=`$TRUST_Awk 'BEGIN {mes="KO";ok=0} /...OK/ {ok++} END {if (ok==1) mes="OK"; print mes}' testval.log`
	      fi
	    fi
	    echo "KVALGRIND="$OK
	    if [ $OK = "OK" ] 
            then
              rm -f *$case.val 
            elif [ $OK = "KO" ]
            then
              echo "See $Build/testval.log file"
            fi
	    cd $TRUST_ROOT
         fi	 
	 ################################
	 # On lance les tests sur Xprepro
	 ################################
         echo "--------------------------------------------------------" 
	 echo "Launch tests on XPREPRO at "`date '+%H:%M:%S'`
	 Build=$TRUST_ROOT/build/Outils;
         [ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build};
         rm -rf $Build/PRE_3DVDF;
         cp -r $TRUST_ROOT/Outils/PRE_3DVDF $Build/.;
         cd $Build/PRE_3DVDF;
	 USE_MPIRUN=1 ./testfort2
	 ###################################################
	 # On lance le test sur les assertions en mode debug
	 ###################################################
         echo "--------------------------------------------------------" 
	 echo "Launch test test_versions.sh at "`date '+%H:%M:%S'`
	 Build=$TRUST_ROOT/build/bin/admin;
         [ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build};
         rm -rf $Build/assert;
         mkdir -p $Build/assert;
	 cd $Build/assert;
	 $TRUST_ROOT/bin/admin/test_versions.sh
	 cd $TRUST_ROOT
	 ######################
	 # Environnement BALTIK
	 ######################
	 cd $TRUST_ROOT/bin/baltik/share/self_test
         echo "--------------------------------------------------------" 
	 echo $ECHO_OPTS "Test of the baltik environment at "`date '+%H:%M:%S'`
	 echo $ECHO_OPTS "BALTIK=\c"
         if [ "`$TRUST_ROOT/bin/admin/liste_machines "\-build64" | grep ^$HOST_BUILD"\."`" != "" ]
         then
	    echo "NOT"
         else
	    USE_MPIRUN=1 ./Test_baltik 1>Test_baltik.log 2>&1
	    if [ $? = 0 ]
	    then
	       echo "OK"
	    else
	       echo "KO"
	       echo "Test_baltik.log report created on $TRUST_ROOT/bin/baltik/share/self_test"
	    fi
	    cat Test_baltik.log
	 fi
	 cd - 1>/dev/null 2>&1	  
	 ######################################
	 # Verifie la non regression de XData #
	 ######################################
	 if [ $NUIT = 1 ]
	 then
	    if [ "`liste_machines "\-xdata" | grep ^$HOST_BUILD"\."`" != "" ]
	    then
               echo "--------------------------------------------------------" 
	       echo "Test the no-regression of XData at "`date '+%H:%M:%S'`
	       cd $TRUST_ROOT/Outils/TRIOXDATA;rm -f *.log;make 1>make.log 2>&1;make check 1>check_xdata.log 2>&1;cat check_xdata.log;cp check_xdata.log $TRUST_TMP/.;cd - 1>/dev/null 2>&1
	    fi
	 fi		 
	 ###############################################
	 # Verifie la non regression sur n processeurs #
	 ###############################################
	 if [ $NUIT = 1 ]
	 then
	    if [ "`liste_machines "\-Check_decoupage" | grep ^$HOST_BUILD"\."`" != "" ]
	    then
               echo "--------------------------------------------------------" 
	       echo "Verify the no-regression of parallelism at "`date '+%H:%M:%S'`
	       Check_decoupage.ksh -all >> $PERF
	       grep Check_decoupage.ksh.log $PERF
	       echo "--------------------------------------------------------" >> $PERF
	    fi
	 fi
	 ############################################
	 # Cherche les erreurs memoires avec valgrind
	 ############################################
	 if [ $NUIT = 1 ]
	 then
	    if [ "`liste_machines "\-check-valgrind" | grep ^$HOST_BUILD"\."`" != "" ]
	    then
               echo "--------------------------------------------------------" 
	       echo "Search memories errors with Valgrind at "`date '+%H:%M:%S'`
               rm -f ANA.log
	       cd $TRUST_ROOT/Validation/Valgrind
	       rm -f *.val *.err *.out *.log cas*
	       ./testall `liste_machines "\-check-valgrind" | $TRUST_Awk -v HOST=$HOST_BUILD -F"." '// {t++} ($1==HOST) {p=NR} END {print p" "t}'` 2>&1
	       ./ANA 2>&1 | tee ANA.log
	       cp ANA.log $TRUST_TMP/.
	       cp casmem $TRUST_TMP/.
	    fi
	 fi
 
	 ######################################
	 # On lance les tests de non regression
	 ######################################    
	 # Premiere liste minimale de cas tests a passer
	 NUM=liste_cherche
	 #cherche.ksh PARALLEL@OK VEFPreP1B dimension@3 sous_maille 1>/dev/null # Dans TRUST pas de modele de turbulence LES mais seulement RANS
	 cherche.ksh PARALLEL@OK VEFPreP1B dimension@3 K_epsilon 1>/dev/null
	 #PAR_Impinging_jet ATTENTION En parallele plantage possible sur ce cas... => supprime de la liste liste_cherche
	 grep -v Impinging_jet liste_cherche > tmp_liste_cherche
	 mv tmp_liste_cherche liste_cherche
	 rm -f tmp_liste_cherche
	 # Ajout de PETSC_ThHyd_2D_VEF_Ostwald pour PETSc Cholesky
	 # Ajout de FTD_instab2D car ce cas a pose des blocages sur OpenMPI 1.3.3 sur is212958 => n'existe pas dans TRUST mais TrioCFD
	 # Ajout de Canal_perio_VDF_3D_Keps pour discretisation VDF
	 #echo PETSC_ThHyd_2D_VEF_Ostwald >> liste_cherche && echo FTD_instab2D >> liste_cherche && echo Canal_perio_VDF_3D_Keps >> liste_cherche 
	 echo PETSC_ThHyd_2D_VEF_Ostwald >> liste_cherche && echo Canal_perio_VDF_3D_Keps >> liste_cherche 
	 # Autres ajouts
	 echo cpu_3D >> liste_cherche #&& echo PETSC_VDF >> liste_cherche && echo PETSC_VEF >> liste_cherche
	 echo VAHL_DAVIS >> liste_cherche && echo upwind >> liste_cherche && echo Cx >> liste_cherche 
	 # Test outils Gmsh et VisIt
	 echo Kernel_Gmsh2Trio_U >> liste_cherche 
	 [ "${HOST:0:6}" != cobalt ] && echo Extrait_plan >> liste_cherche # Test provisoire : en attente d une solution via SLURM
	 # Test MED_COUPLING_PYTHON
         echo Lata_conversion_scripts_jdd1 >> liste_cherche
         echo MED_major_jdd1 >> liste_cherche
	 # Ensuite selon les options, on affine:
	 teste=0
	 if [ "`liste_machines "\-without_run" | grep ^$HOST_BUILD"\."`" ]
	 then
            NUM=cpu_3D
	 elif [ "`liste_machines "\-seq" | grep ^$HOST_BUILD"\."`" ]
	 then
            [ $NUIT = 1 ] || [ $teste = 1 ] && NUM=liste_cherche && cherche.ksh PARALLEL@NOT      
	 elif [ "`liste_machines "\-disable " | grep ^$HOST_BUILD"\."`" ]
	 then
	    [ $NUIT = 1 ] && NUM=0
	 elif [ "`liste_machines "\-all" | grep ^$HOST_BUILD"\."`" ]
	 then
            [ $NUIT = 1 ] || [ $teste = 1 ] && NUM=0
         elif [ "`liste_machines "\-limited_seq" | grep ^$HOST_BUILD"\."`" ]
         then
	    [ $NUIT = 1 ] || [ $teste = 1 ] && NUM=Th_Axi
	 elif [ "`liste_machines "\-limited" | grep ^$HOST_BUILD"\."`" ]
	 then
            [ $NUIT = 1 ] || [ $teste = 1 ] && NUM=cpu_3D
	 elif [ "`liste_machines "\-force_petsc_have_cuda" | grep ^$HOST_BUILD"\."`" ]
	 then
	    [ $NUIT = 1 ] || [ $teste = 1 ] && NUM=PETSC_CUDA
	 elif [ "`liste_machines "\-force_petsc_have_openmp" | grep ^$HOST_BUILD"\."`" ]
	 then
	    [ $NUIT = 1 ] || [ $teste = 1 ] && NUM=PETSC_OPENMP
	 fi
	 # Choix de l'executable pour lance_test
	 lance_test_exec=$exec_opt
	 [ $NUIT = 1 ] && [ "`liste_machines "\-prof" | grep ^$HOST_BUILD"\."`" != "" ] && lance_test_exec=$exec_pg
	 [ $NUIT = 1 ] && [ "`liste_machines "\-gcov" | grep ^$HOST_BUILD"\."`" != "" ] && lance_test_exec=$exec_gcov	
	 [ $NUIT = 1 ] && [ "`liste_machines "\-avx"  | grep ^$HOST_BUILD"\."`" != "" ] && lance_test_exec=$exec_avx	
	 [ $NUIT = 1 ] && [ "`liste_machines "\-g "   | grep ^$HOST_BUILD"\."`" != "" ] && lance_test_exec=$exec_debug	
	 # On efface le CR
	 CR_TESTS=$TRUST_TMP/tests/.tests_`basename $lance_test_exec`
	 rm -f $CR_TESTS
         echo "--------------------------------------------------------" 
	 echo "Start of launch $MODULE tests on $HOST_BUILD with `basename $lance_test_exec` at `date`..."
	 echo "echo $NUM | lance_test $lance_test_exec"
	 export USE_MPIRUN=1 && echo $NUM | lance_test $lance_test_exec 1>lance_test.log 2>&1
	 echo "End of launch $MODULE tests on $HOST_BUILD with `basename $lance_test_exec` at `date`..."
	 
	 ################################
	 # Generation couverture de tests
	 ################################
	 if [ "`liste_machines "\-gcov" | grep ^$HOST_BUILD"\."`" != "" ]
	 then	 
	 #   # Lancement de lcov qui produit un rapport sous $TRUST_ROOT/doc/Coverage/lcov/html
         #   echo "--------------------------------------------------------" 
         #   echo "Start of lcov at `date '+%H:%M:%S'`"
            cd $TRUST_ROOT/doc/Coverage/lcov
	    rm -r -f html lcov.log
         #   cp $TRUST_TMP/tests/GCDA/ana/*.gcda $TRUST_ROOT/MonoDir$COMM/src/.
         #   cp $TRUST_TMP/tests/GCDA/ana/*.gcno $TRUST_ROOT/MonoDir$COMM/src/.
         #   chmod +x $TRUST_ROOT/MonoDir$COMM/src/*.gcno
         #   make clean 1>>lcov.log 2>&1
         #   make 1>lcov.log 2>&1 || echo "Error with lcov! See `pwd`/lcov.log `cat \`pwd\`/lcov.log`" | mail_ -s\"[mise_a_jour_TRUST_arch] KO lcov script on $HOST_BUILD\" $TRUST_MAIL
         #   echo "Generation of `pwd`/lcov.log"
         #   cd - 1>/dev/null 2>&1
         #   echo "End of lcov at `date '+%H:%M:%S'`"
	 fi
         #################################################
	 # Mesure les performances en // avec le BENCHMARK
	 #################################################
	 if [ "`liste_machines "\-benchmark" | grep ^$HOST_BUILD"\."`" != "" ]
	 then
	    if [ $NUIT = 1 ] && [ -f $exec ]
	    then
	       echo "--------------------------------------------------------" 
	       echo "Run_bench script launched on $HOST_BUILD at "`date '+%H:%M:%S'`" ..."
	       (Build=$TRUST_ROOT/build/tests/Reference;
                [ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build};
                rm -rf $Build/BENCHMARK;
                cp -r $TRUST_ROOT/tests/Reference/BENCHMARK $Build/.;
                cd $Build/BENCHMARK;
	        rm -f Run_bench.log;
		echo "Run_bench script launched on $HOST_BUILD at "`date '+%H:%M:%S'`" ..." >> $PERF;
		echo " " >> $PERF;
		echo "TRUST Run_bench on $HOST the `date` ...">Run_bench.log;
		./Run_bench 1>>Run_bench.log 2>&1;
		cat par >> $PERF;
		echo " " >> $PERF;
		echo "--------------------------------------------------------" >> $PERF;
		perf=`$TRUST_Awk 'BEGIN {p=0} ($1==4) && (NF==12) && /\|/ {if ($(NF-1)>0.60) p=p+0.25} ($1==1) && (NF==12) && /\|/ {if ($3<8) p=p+0.25} END {print p}' $PERF`;
	        if [ $(echo " $perf < 1 " | bc) -eq 1 ]
	        then
	           echo "BENCHMARK=KO"
	        else
	           echo "BENCHMARK=OK"
	        fi
		)
	    fi
	 fi	 
	 ##########################################################
	 # On verifie reprise_auto sur les machines de production #
	 ##########################################################
	 if [ "`liste_machines "\-benchmark" | grep ^$HOST_BUILD"\."`" != "" ] && [ "`grep $HOST $TRUST_ROOT/bin/reprise_auto | grep Supported`" != "" ]
	 then
            echo "--------------------------------------------------------" 
            echo "Test of reprise_auto at `date '+%H:%M:%S'`"
	    Build=$TRUST_ROOT/build/bin/admin;
            [ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build};
            rm -rf $Build/reprise_auto;
            mkdir -p $Build/reprise_auto;
	    cd $Build/reprise_auto;
	    USE_MPIRUN=1 $TRUST_ROOT/bin/admin/test_reprise_auto.sh
	    cd $TRUST_ROOT
	 fi	 
	 ########################################################
	 # On verifie Run_fiche sur un nombre limite de machines:
	 # VisIt doit etre installe et fonctionner
	 # Etre une machine cible (si on teste sur toutes les machines en meme temps, on a un message "trop de clients X11"
	 ###########################################
	 test_run_fiche=1
         [ "`eval pdflatex --version 1>/dev/null 2>&1;echo $?`" != 0 ] && test_run_fiche=0
	 if [ "$test_run_fiche" = 1 ] && [ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable " | grep ^$HOST_BUILD"\."`" = "" ] && [ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-optionals" | grep ^$HOST_BUILD"\."`" = "" ] && [ "`$TRUST_ROOT/bin/admin/liste_machines "\-disable-tools" | grep ^$HOST_BUILD"\."`" = "" ] && [ "`$TRUST_ROOT/bin/admin/liste_machines "\-without-visit" | grep ^$HOST_BUILD"\."`" = "" ]
	 then
            echo "--------------------------------------------------------"
            echo "Test of Run_fiche at `date '+%H:%M:%S'`"
            Build=$TRUST_ROOT/build/doc/TRUST/exercices
            [ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build}
            rm -rf $Build/validation_form_exercise
            cp -r $TRUST_ROOT/doc/TRUST/exercices/validation_form_exercise $Build/.
            cd $Build/validation_form_exercise
	    log=`pwd`/Run_fiche.log
	    rm -f $log
	    rm -r -f build Run.log
	    visit_erreur=`$TRUST_ROOT/exec/VisIt/bin/visit -help 1>/dev/null 2>&1;echo $?`
	    if [ $visit_erreur = 0 ]
	    then
	       if [ "${HOST:0:6}" = cobalt ] # Test provisoire : en attente d une solution via SLURM
	       then
	          USE_MPIRUN=1 Run_fiche -no_visit 1>$log 2>&1
               else
	          USE_MPIRUN=1 Run_fiche 1>$log 2>&1
	       fi
	       Run_fiche_KO=$?
	    else
	       echo "VisIt is not working under $TRUST_ROOT/Outils/VisIt" 1>$log 2>&1
	       Run_fiche_KO=1
	    fi
	    if [ $Run_fiche_KO = 0 ]
	    then
	       echo "Script Run_fiche=OK"
	    else
	       echo "Script Run_fiche=KO -> See $log"
	    fi
	    cd - 1>/dev/null 2>&1
         fi	
	 ###################################
	 # Lance la verification des modules
	 ###################################
	 if [ $NUIT = 1 ] && [ "`grep activation_verification_modules=1 $TRUST_ROOT/bin/admin/lance_test_nuit`" != "" ]
	 then
            echo "--------------------------------------------------------" 
	    modules=`cd $TRUST_ROOT/Validation/Modules;ls */cree_liste_cas | $TRUST_Awk -F/ '{print $1}'`
	    for module in $modules
	    do
	       if [ "`liste_machines "\-verification_module_$module" | grep ^$HOST_BUILD"\."`" != "" ]
	       then
	          cd $TRUST_ROOT/Validation/Modules
		  (
		  # Compilation d'une version semi-optimisee pour aller plus vite
		  exec=${exec%_opt}_semi_opt
		  (cd $TRUST_ROOT; make semi_opt) 
		  OPT="_semi_opt" 
		  echo "Lancement de la verification du module $module sur $HOST_BUILD avec $exec..."
		  # On efface les rapports precedants
		  rm -f $module/.tests_TRUST_*
                  ./lance_valid_module $module 1>$module/$module.log 2>&1
		  if [ $? = 0 ]
		  then
		     echo "$module=OK" >> $module/$module.log
		     echo "Succes de la verification du module $module sur $HOST_BUILD."
		  else
		     echo "$module=KO" >> $module/$module.log
		     echo "Echec de la verification du module $module sur $HOST_BUILD. Voir `pwd`/$module/$module.log"
		  fi
		  )
	       fi
	    done
	 fi		 
      elif [ $MODULE = Diphasique ]
      then
         # Numero du cas test :         
         [ $NUM = -1 ] && NUM=enceinte64
         echo $NUM | lance_test_dipha $exec 1>/dev/null 2>/dev/null
      else
         echo "Error: $MODULE case not provided" && exit_
      fi

      echo "--------------------------------------------------------"
      echo "Verification of $MODULE NR tests on $HOST_BUILD at "`date '+%H:%M:%S'`
      CR_TESTS=$TRUST_TMP/tests/.tests_`basename $lance_test_exec`
      if [ -f $CR_TESTS ]
      then
         cat $CR_TESTS | grep -v Succes | tee -a $PERF
         cat $CR_TESTS | $TRUST_Awk -F":" '/ucces/ {print "succes "$2}' >> $PERF
         echo "--------------------------------------------------------" >> $PERF
      else
         echo "File not found $CR_TESTS"
         echo "No test case passed KO!"
      fi
      # Verification si la non regression est OK :
      if [ "`grep OK $PERF`" = "" ]
      then
         echo "Executable no tested for $HOST_BUILD : $lance_test_exec"
      else
         echo "Executable tested for $HOST_BUILD : $lance_test_exec"
      fi
      echo "--------------------------------------------------------"
   else
      echo "No executable for $HOST_BUILD KO!"
   fi
   cd $ROOT
done
########################################################
# Recherche des fichiers qui n'ont pas les bons droits #
########################################################
cd $TRUST_ROOT
# On met les bons droits
change_droits
if [ "`grep intra.cea.fr /etc/* 2>/dev/null`" != "" ]
then
   # Fichiers en 444 au moins
   echo "Checking permission (>=444) on files at "`date '+%H:%M:%S'`" ..."
   find . -type f -exec stat -L --format="%a %N" {} \; | grep -v [4-7][4-7][4-7]
   # Fichiers en 555 au moins
   echo "Checking permission (>=555) on directories at "`date '+%H:%M:%S'`" ..."
   find . -type d -exec stat -L --format="%a %N" {} \; | grep -v [5-7][5-7][5-7]
else
   # Fichiers en 440 au moins
   echo "Checking permission (>=440) on files at "`date '+%H:%M:%S'`" ..."
   find . -type f -exec stat -L --format="%a %N" {} \; | grep -v [4-7][4-7]0
   # Fichiers en 550 au moins
   echo "Checking permission (>=550) on directories at "`date '+%H:%M:%S'`" ..."
   find . -type d -exec stat -L --format="%a %N" {} \; | grep -v [5-7][5-7]0
fi
##############################################
# envoi d'un mail a l'expediteur si en journee
##############################################
fic=CR_$HOST_BUILD
[ $NUIT = 0 ] && cat ~/$fic | mail_ -s\"[mise_a_jour_TRUST_arch] End of update script during the day on $HOST_BUILD at `date '+%H:%M:%S'`\" $QUI
echo "----------------------------------------------------------------------------"
echo "End of update script on $HOST_BUILD at `date '+%H:%M:%S'`"
echo "----------------------------------------------------------------------------"

#exit_ 0
exit 0
