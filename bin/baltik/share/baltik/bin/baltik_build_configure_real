#!/bin/bash
# --
# Author : GF (CEA)
# --

baltik_environnement_error() {
    echo "-----------------------------------------"
    echo "ERROR : undefined variable BALTIK_ROOT   "
    echo ""
    echo "Please, install BALTIK and run :         "
    echo "  source /path/to/BALTIK/bin/baltik_init "
    echo "-----------------------------------------"
    echo ""
    exit 1
}

baltik_environnement_init()
{
	script=$0
	bindir=`dirname $script`
	cd `dirname $bindir`
	pwd
}

# initialisation de l'etat de la variable BALTIK_ROOT
BALTIK_ROOT=`baltik_environnement_init`
# verification de l'etat de la variable BALTIK_ROOT
if [  "${BALTIK_ROOT}" = "" ]
then
    baltik_environnement_error
fi

# chargement des fonctions d'affichage des messages d'erreur
. ${BALTIK_ROOT}/bin/baltik_errors


# verification de la presence d'un fichier de configuration
project_directory=`pwd`
project_configuration_file="${project_directory}/project.cfg"
if  [ ! -e $project_configuration_file ] || [ ! -f $project_configuration_file ] 
then
    no_configuration_file_error "$project_directory=$"
fi

script_name="${BALTIK_ROOT}/"`basename $0`
echo "#!/bin/bash
# --
# Author : GF (CEA)
# --
# generated by $script_name
$BALTIK_ROOT/bin/baltik_configure " > configure
cp $BALTIK_ROOT/../../doc/README.BALTIK .
chmod +x configure
chmod +w README.BALTIK
if [ "$1" != "" ]
then
[ "$1" = "-execute" ] && ./configure && exit $?
echo $1 option not available && exit 1
else
echo "You can now run ./configure. (baltik_build_configure -execute : build ./configure and run it)"
fi
exit 0
