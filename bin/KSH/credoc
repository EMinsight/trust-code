#!/bin/bash
##################################################################
# Creation des sources html par Doxygen sous $TRUST_ROOT/doc/html
##################################################################
doxygen()
{
   echo "See $TRUST_ROOT/build/doc/doxygen*.* files"
   rm -r -f $TRUST_ROOT/build/doc/doxygen*.*
   make_Doxyfile
   echo "End doxygen at `date '+%H:%M:%S %d/%m'`";
   # Verification des includes avec Doxygen (fait uniquement le vendredi soir)
   #if [ "`date '+%u'`" = 5 ]
   #then
   #   cd $TRUST_ROOT/MonoDir$COMM;
   #   (echo "Begin check_include at `date '+%H:%M:%S %d/%m'`";echo "See $TRUST_ROOT/MonoDir$COMM/check_include.log";check_include 1>check_include.log 2>&1;echo "End check_include at `date '+%H:%M:%S %d/%m'`")#&
   #fi
} 


################################################
# Creation du fichier des cas tests de reference
################################################
cree_References()
{
echo "Begin reference index at `date '+%H:%M:%S %d/%m'`"
echo "From $TRUST_TESTS/Reference directory"
# Appel a $TRUST_ROOT/bin/HTML/cree_References.html
fichier=$TRUST_TMP/References.html
tmp=$HOME/.tmp_file
# Ecriture de l entete du fichier
notice=.."/doc/TRUST/TRUST_Generic_documentation.pdf"
echo "<!--NewPage-->
<html>
<head>
<title> TRUST </title>
</head>
<body>
<BODY BGCOLOR="#D0D5D9" TEXT="#23238E" LINK="#E47833" ALINK="#007FFF" VLINK="#007FFF">
<a href=$notice>Generic Guide</a> | <a href=Reference/index_keywords_tests.html>Keyword index</a> | <a HREF=mailto:trust@cea.fr>Support</a>" > $fichier
echo "<HR><h1>Reference test cases for TRUST</h1><HR>" >> $fichier
# On parcourt les tests pour faire l index
i=0
cd $TRUST_TESTS
echo "<TABLE BORDER COLS=2><TR>
<TD WIDTH="1%">Name</TD><TD WIDTH="100%">Configuration</TD></TR>" >> $fichier
testslist=`find Reference/ -follow -name *.lml.gz -print 2>/dev/null | sort`
for fic in $testslist
do
   let i=$i+1
   NOM=`basename $fic .lml.gz`
   com=`head -1 ${fic%.lml.gz}.data`
   echo $ECHO_OPTS "<TR><TD><SMALL><A HREF="\"#$NOM\"">$NOM</A></TD><TD><SMALL>$com</TD></TR>" >> $fichier
done
echo $ECHO_OPTS "</TABLE><HR><PRE>" >> $fichier
# On parcourt les tests pour creer les liens Edit/Copy
i=0
cd $TRUST_TESTS
for fic in $testslist
do
   let i=$i+1
   NOM=`basename $fic .lml.gz`
   REP=`dirname $fic`
   com=`head -1 ${fic%.lml.gz}.data`
   echo $ECHO_OPTS "<CENTER><B><A NAME=$NOM>$NOM</A></B></CENTER>" >> $fichier
   echo $ECHO_OPTS "<CENTER>$com</CENTER>" >> $fichier
   REP_REL="../tests/"$REP
   for fic_format in `cd $REP;ls $NOM.data *.geo *.geom *.geom.gz 2>/dev/null`
   do
      if [ -f $REP/$fic_format ]
      then
         echo $ECHO_OPTS "<CENTER><a href="$REP_REL/$fic_format">"Edit"</a> $fic_format </CENTER>" >> $fichier
      fi
   done
   echo $ECHO_OPTS "<HR>\c" >> $fichier
done
echo $ECHO_OPTS "</body>
</html> " >> $fichier
# On met a jour le fichier si different
References=$TRUST_ROOT/tests/References.html
if [ "`diff $References $fichier`" != "" ]
then
   CHECKOUT $References
   cat $fichier > $References
   CHECKIN $References
fi
echo "-> Update $TRUST_TESTS/References.html"
echo "End cree_References at `date '+%H:%M:%S %d/%m'`"
}


##############################################################################
# Nouveau : ajout cree des liens entre la liste des mots cles et les cas tests
##############################################################################
tests()
{
echo "Begin keyword index at `date '+%H:%M:%S %d/%m'`"
echo "From $TRUST_ROOT/doc/TRUST/Keywords.txt file"
echo " and $TRUST_TESTS/Reference directory"
keywords=$TRUST_ROOT/doc/TRUST/Keywords.txt
Build=$TRUST_ROOT/build/doc/TRUST
[ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build}
rm -f $Build/list_keywords_covered $Build/list_keywords_NOT_covered
html=$TRUST_TESTS/Reference/index_keywords_tests.html.tmp
echo "<html>
<table BORDER=1 CELLSPACING=1 CELLPADDING=1 cols=4>
<tr valign=top>
<td WIDTH=40%><b>Keywords</b></td>
<td WIDTH=20%><b>Test case 1</b></td>
<td WIDTH=20%><b>Test case 2</b></td>
<td WIDTH=20%><b>Test case 3</b></td>
</tr>" > $html
cd $TRUST_TESTS/Reference
for keyword in `$TRUST_Awk -F"|" '{print $1" "$2}' $keywords`
do
   # Cherche dans les jeux de donnees
   # D'abord ceux avec PARALLEL@OK et $keyword
   cherche.ksh PARALLEL@OK $keyword 1>/dev/null 2>&1
   # Cherche ensuite parmi tous les cas tests si aucun jeu de donnees trouve
   [ ! -f $TRUST_TESTS/Reference/liste_cherche ] && cherche.ksh $keyword 1>/dev/null 2>&1
   if [ -f $TRUST_TESTS/Reference/liste_cherche ]
   then
      echo "<tr valign=top>
<td WIDTH=40%><FONT Size=-1><b>$keyword</b></FONT></td>" >> $html
      # Ecriture dans le fichier .txt et dans un fichier html
      ligne=$keyword"\t\t\t\t\t"
      for test in `$TRUST_Awk '{print length()" "$1}' $TRUST_TESTS/Reference/liste_cherche | sort -n | head -3 | $TRUST_Awk '{print $2}'`
      do
          ligne=$ligne" "$test
	  echo "<td WIDTH=20%><FONT Size=-2><A HREF=../References.html#$test TARGET=p>$test</A></FONT></td>" >> $html
      done
      echo $ECHO_OPTS $ligne >> $Build/list_keywords_covered
      echo "</tr>" >> $html
   else
      # Previent qu'il n'y a pas de cas test pour un mot cle !
      echo "The $keyword keyword has no test cases!" >> $Build/list_keywords_NOT_covered
   fi
done
rm -f $TRUST_TESTS/Reference/liste_cherche 1>/dev/null 2>&1
echo "-> Update $Build/list_keywords_covered file (keywords have test cases)"
echo "-> Update $Build/list_keywords_NOT_covered file (keywords have NO test cases)"
echo "</html>" >> $html
CHECKOUT ${html%.tmp} 1>/dev/null 2>&1
if [ "`diff $html ${html%.tmp}`" != "" ]
then
   mv -f $html ${html%.tmp}
else
   rm -f $html
fi
echo "-> Update $TRUST_TESTS/Reference/index_keywords_tests.html file"
echo "End keyword index at `date '+%H:%M:%S %d/%m'`"
}


pdf_par_office()
{
##########################
# Creation de fichiers PDF
##########################
# Attention configurer la sortie pdf par defaut avec : /usr/lib/openoffice/spadmin
# Repondre non a la question les liens doivent t'ils etre actives
# Modification Cyril MALOD le 10-10-2006 : Plus de question ne doit etre posee !
# Modification Cyril MALOD le 26-08-2008 : passage a OpenOffice 2.0
# Modification Pierre LEDAC le 05-03-2013 : passage a OpenOffice 3.6 et format Word/PowerPoint abandonnes
# Desormais toute la documentaion est au format ODP et ODT
ooffice=/usr/bin/soffice
formats="odp odt" # Formats supportes
echo "Start converting documents in pdf format at `date '+%H:%M:%S %d/%m'`"
if [ -f $ooffice ]
then
   tmp=`mktemp_ -d`
   cd $tmp
   echo "-> List of *.od* documents"
   ls -rt $TRUST_ROOT/doc/TRUST/*.od* | grep -v ods 2>/dev/null
   echo "-> Update *.pdf documents"
   for fichier in `ls -rt $TRUST_ROOT/doc/TRUST/*.od* | grep -v ods 2>/dev/null`
   do
      pdf=$fichier
      for format in $formats
      do
	 pdf=${pdf%.$format}
      done
      pdf=`basename $pdf`".pdf"
      pdf_livre=$TRUST_ROOT/doc/TRUST/$pdf
      if [ ${#fichier} != 0 ] && [ $fichier -nt $pdf_livre ]
      then
         echo "$fichier found ..." 
	 $ooffice -display :0 --headless --convert-to pdf $fichier
	 if [ ! -f $pdf ]
	 then
	    echo "KO: Fail to create the $pdf file from $fichier"
	    echo "See `pwd`/ooffice.log"
	 else
	    if [ ! -f $pdf_livre ]
	    then
	       mv -f $pdf $pdf_livre     
	       CHECKOUT `dirname $pdf_livre` 2>/dev/null
	       MKELEM $pdf_livre
	    elif [ "`diff $pdf $pdf_livre`" != "" ]
            then
               CHECKOUT $pdf_livre 1>/dev/null 2>&1
               mv -f $pdf $pdf_livre     
            fi
	    echo "OK: $pdf_livre updated."
	 fi
      fi
   done
   cd - 1>/dev/null 2>&1
   rm -r -f $tmp
fi
echo "End pdf_par_office at `date '+%H:%M:%S %d/%m'`"
}

pdf_par_xdata()
{
#####################################
# Creation de la future documentation
#####################################
   Build=$TRUST_ROOT/build/Outils/TRIOXDATA/XTriou
   [ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build}
   rm -f $Build/list_keywords_xdata_tested $Build/list_keywords_xdata
   echo "See $Build/pdf_par_xdata.log"
   # Initialisation environnement XData
   cd $TRUST_ROOT/Outils/TRIOXDATA/XTriou
   echo $ECHO_OPTS "Step $TRUST_ROOT/Outils/TRIOXDATA/XDATA.sh" > $Build/pdf_par_xdata.log
   . ../XDATA.sh >> $Build/pdf_par_xdata.log
   # Nettoyage
   echo $ECHO_OPTS "\nStep $TRUST_ROOT/Outils/TRIOXDATA/XTriou/make" >> $Build/pdf_par_xdata.log
   make clean >> $Build/pdf_par_xdata.log
   # Creation de triou.py
   make >> $Build/pdf_par_xdata.log
   # Verification sur 5 cas tests
   echo $ECHO_OPTS "\nStep $TRUST_ROOT/Outils/TRIOXDATA/XTriou/make test" >> $Build/pdf_par_xdata.log
   make test 2>/dev/null >> $Build/pdf_par_xdata.log
   # Verification sur tous les cas tests
   # make test_ref >> $Build/pdf_par_xdata.log
   # Creation de la doc PDF et LATEX
   echo $ECHO_OPTS "\nStep $TRUST_ROOT/Outils/TRIOXDATA/XTriou/make doc" >> $Build/pdf_par_xdata.log
   make doc >> $Build/pdf_par_xdata.log
   # Couverture des mots-cles par cas test
   echo $ECHO_OPTS "\nStep $TRUST_ROOT/Outils/TRIOXDATA/XTriou/make test_ref_trace" >> $Build/pdf_par_xdata.log
   make test_ref_trace >> $Build/pdf_par_xdata.log
   cp traces $Build/list_keywords_xdata
   cp tests/traces $Build/list_keywords_xdata_tested
   cd - 1>/dev/null 2>&1
   echo "End pdf_par_xdata at `date '+%H:%M:%S %d/%m'`"
}

###################
# Debut du script #
###################
echo "Begin credoc at `date '+%H:%M:%S %d/%m'`"
if [ "$1" = -doxygen ]
then
   doxygen
elif [ "$1" = -pdf ]
then
   pdf_par_office
elif [ "$1" = -xdata ]
then
   pdf_par_xdata
elif [ "$1" = -cree_References ]
then
   cree_References
elif [ "$1" = -tests ]
then
   tests 
else
   echo "####################################################"
   echo "# Begin doxygen at `date '+%H:%M:%S %d/%m'`"
   doxygen
   echo "####################################################"
   echo "# Begin pdf_par_office at `date '+%H:%M:%S %d/%m'`"
   pdf_par_office
   echo "####################################################"
   echo "# Begin pdf_par_xdata at `date '+%H:%M:%S %d/%m'`"
   pdf_par_xdata
   echo "####################################################"
   echo "# Begin cree_References at `date '+%H:%M:%S %d/%m'/`"
   cree_References
   echo "####################################################"
   echo "# Launch tests at `date '+%H:%M:%S %d/%m'`"
   # On lance en batch car tests est lent (a optimiser)
   tests &
fi
echo "####################################################"
echo "End credoc at `date '+%H:%M:%S %d/%m'`"
echo " "
