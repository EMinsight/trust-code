#!/bin/bash
# AmgX + AmgXwrapper
# AmgX: See https://github.com/NVIDIA/AMGX#building
# AmgXwrapper: See https://github.com/barbagroup/AmgXWrapper/blob/master/doc/install.md
AMGX_DIR=`dirname $1`
LIB=`basename $1`
ROOT=`pwd`
log=$ROOT/perf_amgx.log && rm -f $log
rm -r -f $LIB
if [ $LIB = AmgX ]
then
   # Build
   cd $ROOT
   if [ "`nvcc --version | grep 10.[12]`" != "" ]
   then
      # Cuda 10.1 ou 10.2
      # Commit d0019e5 (more recent commit)
      tar xfz $TRUST_ROOT/externalpackages/$LIB"_"d0019e5.tar.gz
   elif [ "`nvcc --version | grep 10.0`" != "" ]
   then
      # Cuda 10.0
      # Commit ba9132119f (supporte par AmgXWrapper)
      tar xfz $TRUST_ROOT/externalpackages/$LIB"_"ba9132119f.tar.gz
   elif [ "$TRUST_WITHOUT_HOST" = 1 ]
   then
      # Latest:
      git clone https://github.com/NVIDIA/AMGX.git $LIB
   else
      echo "Update $0 for your needs." && exit -1
   fi
   cd $LIB && mkdir -p build && cd build
   cmake -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB -DCMAKE_CXX_COMPILER=$TRUST_CC -DCMAKE_C_COMPILER=$TRUST_cc .. && $TRUST_MAKE && make install && cp -f ../examples/matrix.mtx $AMGX_DIR/$LIB/lib/examples
   [ $? != 0 ] && exit -1
   # Test
   cd $AMGX_DIR/$LIB/lib/examples
   export LD_LIBRARY_PATH=$AMGX_DIR/$LIB/lib:$LD_LIBRARY_PATH
   exec=./amgx_capi     trust -gpu dummy   -m matrix.mtx -c ../configs/core/FGMRES_AGGREGATION.json 2>&1 | tee -a $log
   exec=./amgx_mpi_capi trust -gpu dummy 2 -m matrix.mtx -c ../configs/core/FGMRES_AGGREGATION.json 2>&1 | tee -a $log
   # solve: 	amgx_capi  	amgx_mpi_capi
   # P600 	0.1120s		bizarre
   # P2000      0.0010s		0.0256s
   # V100 	0.0011s		0.0153s
   # Site AmgX	0.0006s		0.0156s
fi
if [ $LIB = AmgXWrapper ]
then
   cd $ROOT
   tar xfz $TRUST_ROOT/externalpackages/$LIB"_"*.tar.gz
   # Hack pour empecher le test des binaires qui ne marche pas cluster (un binaire PETSc compile avec CUDA plantera sur la frontale non gpu)
   sed -i "1,$ s?endif (\${\${runs}})??" AmgXWrapper/cmake-modules/FindPETSc.cmake
   sed -i "1,$ s?if (\${\${runs}})??"    AmgXWrapper/cmake-modules/FindPETSc.cmake
   cd $LIB && rm -r -f build && mkdir -p build && cd build
   cmake -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB -DCUDA_DIR=$CUDA_ROOT -DAMGX_DIR=$AMGX_DIR/AmgX .. && $TRUST_MAKE
   [ $? != 0 ] && exit -1
   make install # Erreur sur la doc on ne fait pas de exit
   # Test
   cd ../example
   rm -r -f build && mkdir build && cd build
   sed -i "1,$ s?# include <petsctime.h>??g" ../poisson/src/solve.cpp
   cmake -DCUDA_DIR=$CUDA_ROOT -DAMGX_DIR=$AMGX_DIR/AmgX ../poisson && $TRUST_MAKE || exit -1
   exec=bin/poisson trust -gpu dummy 4 -caseName PETSc_GAMG_100x100x100 -mode PETSc    -cfgFileName configs/PETSc_SolverOptions_GAMG.info     -Nx 100 -Ny 100 -Nz 100 2>&1 | tee -a $log
   exec=bin/poisson trust -gpu dummy 4 -caseName   AmgX_AGG_100x100x100 -mode AmgX_GPU -cfgFileName configs/AmgX_SolverOptions_Classical.info -Nx 100 -Ny 100 -Nz 100 2>&1 | tee -a $log
   # solve 	GAMG	AmgX_AGG
   # P600 	1.83s	crash	is234639
   # P2000	1.72s   0.30s	is240831 (PETSc build avec GPU)
   # V100 	1.32s	0.07s	orcus    (PETSc build avec GPU)
   # V100	1.35s	0.08s	cobalt
fi
# On efface les sources:
cd $ROOT;rm -r -f $LIB
