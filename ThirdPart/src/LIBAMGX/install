#!/bin/bash
# AmgX		: See https://github.com/NVIDIA/AMGX#building
# AmgXwrapper	: See https://github.com/barbagroup/AmgXWrapper/blob/master/doc/install.md
AMGX_DIR=`dirname $1`
LIB=`basename $1`
ROOT=`pwd`
[ -d $CUDA_ROOT/../math_libs ] &&  export CUDA_LIB_PATH=$CUDA_ROOT/../math_libs # Ajout sur orcus
log=$ROOT/perf_$LIB.log && rm -f $log
rm -r -f $LIB
if [ $LIB = AmgX ]
then
   # Build
   cd $ROOT
   if [ "$TRUST_AMGX_LATEST" != "" ]
   then
      # Latest:
      git clone https://github.com/NVIDIA/AMGX.git $LIB
      cd $LIB && git checkout origin/v2.1.x && commit=`git rev-parse HEAD` && cd -
      tar cfz $TRUST_ROOT/$LIB"_"$commit.tar.gz --exclude .git . && echo "Creation du package \$TRUST_ROOT/$LIB"_"$commit.tar.gz"
   else
      tar xfz $TRUST_ROOT/externalpackages/AmgX/AmgX_6dba8067ca.tar.gz
   fi
   cd $LIB && mkdir -p build && cd build
   # Sur jeanzay, $TRUST_MAKE plante (pas assez de memoire sur frontale?) donc on retente avec make:
   cmake -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB -DCMAKE_CXX_COMPILER=$TRUST_CC -DCMAKE_C_COMPILER=$TRUST_cc .. && ($TRUST_MAKE || make) && make install && cp -f ../examples/matrix.mtx $AMGX_DIR/$LIB/lib/examples
   [ $? != 0 ] && exit -1
   # Test
   cd $AMGX_DIR/$LIB/lib/examples
   export LD_LIBRARY_PATH=$AMGX_DIR/$LIB/lib:$LD_LIBRARY_PATH
   # Test valgrind:
   [ "$TRUST_WITHOUT_HOST" = 1 ] && valgrind ./amgx_capi -m matrix.mtx -c ../configs/core/FGMRES_AGGREGATION.json 2>&1 | tee -a $log
   if [ -f $TRUST_ENV/card.log ] # On ne teste que si on peut lancer des calculs GPU
   then
      exec=./amgx_capi     trust -gpu dummy   -m matrix.mtx -c ../configs/core/FGMRES_AGGREGATION.json 2>&1 | tee -a $log
      exec=./amgx_mpi_capi trust -gpu dummy 2 -m matrix.mtx -c ../configs/core/FGMRES_AGGREGATION.json 2>&1 | tee -a $log
   fi
   # solve: 	amgx_capi  	amgx_mpi_capi
   # P600 	0.1120s		bizarre
   # P2000      0.0010s		0.0256s
   # V100 	0.0011s		0.0153s
   # Site AmgX	0.0006s		0.0156s
   cd $ROOT && rm -r -f $LIB # On efface les sources ?	 
fi
if [ $LIB = AmgXWrapper ]
then
   cd $ROOT
   if [ "$TRUST_AMGXWRAPPER_LATEST" != "" ]
   then
      # Latest:
      git clone https://github.com/barbagroup/AmgXWrapper.git $LIB
      cd $LIB && git checkout master && commit=`git rev-parse HEAD` && cd -
      tar cfz $TRUST_ROOT/$LIB"_"$commit.tar.gz --exclude .git . && echo "Creation du package \$TRUST_ROOT/$LIB"_"$commit.tar.gz"
   else
      tar xfz $TRUST_ROOT/externalpackages/AmgX/AmgXWrapper_331eba32db693528749bd2c46158073079d80972.tar.gz
   fi
   # Hack pour empecher le test des binaires qui ne marche pas cluster (un binaire PETSc compile avec CUDA plantera sur la frontale non gpu)
   sed -i "1,$ s?endif (\${\${runs}})??" AmgXWrapper/cmake-modules/FindPETSc.cmake
   sed -i "1,$ s?if (\${\${runs}})??"    AmgXWrapper/cmake-modules/FindPETSc.cmake
   cd $LIB && rm -r -f build && mkdir -p build && cd build
   BUILD=RELEASE
   CMAKE_CXX_FLAGS="" && [ "$PETSC_HAVE_OPENMP" = 1 ] && CMAKE_CXX_FLAGS="-DCMAKE_CXX_FLAGS=-fopenmp"
   #BUILD=DEBUG
   # On specifie CC et CXX car si HPC SDK, nvc et nvc++ pris a la place (orcus):
   export CC=$TRUST_cc
   export CXX=$TRUST_CC
   CMAKE_FLAGS="$CMAKE_CXX_FLAGS -DCUDA_DIR=$CUDA_ROOT -DAMGX_DIR=$AMGX_DIR/AmgX -DCMAKE_CUDA_HOST_COMPILER=$TRUST_CC_BASE"
   cmake $CMAKE_FLAGS -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB -DCMAKE_BUILD_TYPE=$BUILD .. && $TRUST_MAKE
   [ $? != 0 ] && exit -1
   make install # Erreur sur la doc on ne fait pas de exit
   # Creation d'une librairie statique en plus de la dynamique libAmgXWrapper.so
   ar cru $AMGX_DIR/$LIB/lib64/libAmgXWrapper_static.a CMakeFiles/AmgXWrapper.dir/src/*.o || exit -1
   # Test
   cd $AMGX_DIR/$LIB 
   rm -r -f example && mkdir -p example && cd example
   tests="poisson solveFromFiles"
   for test in $tests
   do
      sed -i "1,$ s?# include <petsctime.h>??g" $ROOT/AmgXWrapper/example/$test/src/solve.cpp || exit -1
      mkdir -p $test && cd $test && cp $ROOT/AmgXWrapper/example/$test/README.md . && cmake $CMAKE_FLAGS $ROOT/AmgXWrapper/example/$test && $TRUST_MAKE && cd .. || exit -1
   done
   cd $AMGX_DIR/$LIB/example/poisson
   # Test valgrind:
   [ "$TRUST_WITHOUT_HOST" = 1 ] && valgrind bin/poisson -caseName valgrind -mode AmgX_GPU -cfgFileName configs/AmgX_SolverOptions_Classical.info -Nx 2 -Ny 2 -Nz 2 2>&1 | tee -a
   if [ -f $TRUST_ENV/card.log ] # On ne teste que si on peut lancer des calculs GPU
   then
      N=100 && [ "`grep P400 $TRUST_ROOT/env/card.log 2>/dev/null`" != "" ] && N=85
      name=$N"x"$N"x"$N
      exec=bin/poisson trust -gpu dummy 4 -caseName   PETSc_GAMG_$name -mode PETSc    -cfgFileName configs/PETSc_SolverOptions_GAMG.info     -Nx $N -Ny $N -Nz $N 2>&1 | tee -a $log
      exec=bin/poisson trust -gpu dummy 4 -caseName AmgX_GPU_AGG_$name -mode AmgX_GPU -cfgFileName configs/AmgX_SolverOptions_Classical.info -Nx $N -Ny $N -Nz $N 2>&1 | tee -a $log
      exec=bin/poisson trust -gpu dummy 4 -caseName AmgX_CSR_AGG_$name -mode AmgX_CSR -cfgFileName configs/AmgX_SolverOptions_Classical.info -Nx $N -Ny $N -Nz $N 2>&1 | tee -a $log
   fi
   # ---------------------------------------------------------------------------	  
   # Machine	NVidia		GFlops	Cuda	Driver	GNU	MPI		solve	GAMG	AmgX_AGG	 
   # is242981	P400 (2Go)	   	10.2	11.0   10.0.1	OpenMPI 4.0.3   	0.90s   0.78s
   # is234639	P600 		 1.1	10.0	10.2	7.4.0	OpenMPI 4.0.3		1.83s	0.67s
   # is225303 	K4000 		 1.2   	 8.0 	 9.0	5.4.0	MPICH 3.2		2.08s	crash Cuda failure: 'invalid device function' dense_lu_solver.cu:698
   # portable   GTX 1050 Ti     2.1	11.1	11.2	9.3.0   OpenMPI 4.0.3		2.07s	0.46s
   # is240831	P2000		 3.0	10.1	10.1	7.5.0	MPICH 3.2		1.72s   0.30s
   # irene	P100-PCIE-12Go	10.6	10.2	10.2	7.3.0	OpenMPI 2.0.4		1.16s	0.11s
   # cobalt	P100-PCIE-16Go	14.1	10.2	10.2	7.3.0	OpenMPI 2.0.4		1.35s	0.08s
   # cobalt     V100 ?		14.1	10.2	10.2	7.3.0	OpenMPI 2.0.4		?	?
   # orcus	V100-PCIE-16Go 	14.1	 9.2 	10.1	6.5.0				1.32s	0.07s
   # jeanzay	V100-SXM2-16Go	14.0	10.2	10.2	8.3.1	OpenMPI	4.0.2-cuda	1.15s	0.048s (7500Euros...)
   #cd $ROOT && rm -r -f $LIB # On efface les sources ?	    
fi
exit 0
