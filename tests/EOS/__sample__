#include "EOS/API/EOS.hxx"
#include "EOS/API/EOS_Fields.hxx"
#include "EOS/API/EOS_Error_Field.hxx"
#include "EOS/API/EOS_Std_Error_Handler.hxx"
#include "TPPI_tools.h"

using namespace NEPTUNE; 

int main(int argc, char const *argv[])
{
  EOS_Std_Error_Handler handler;
  handler.set_exit_on_error(EOS_Std_Error_Handler::disable_feature);
  handler.set_throw_on_error(EOS_Std_Error_Handler::disable_feature);
  handler.set_dump_on_error(EOS_Std_Error_Handler::disable_feature);
 // handler.set_dump_on_error(ok);
 // handler.set_dump_stream(cerr);

  EOS liquid("__MODEL__", "__FLUID__");
  liquid.set_error_handler(handler);

  EOS steam("__MODEL__", "__FLUID__");
  steam.set_error_handler(handler);

  int n = 2;

  VectorD p(n), h(n), rhol(n), drhol_dp(n), drhol_dhl(n),
      Cpl(n), dCpl_dp(n), dCpl_dhl(n),
      Tl(n), dTl_dp(n), dTl_dhl(n),
      mul(n), dmul_dp(n), dmul_dhl(n),
      lambdal(n), dlambdal_dp(n), dlambdal_dhl(n),
      sigma(n), dsigmap_dp(n);

  for (int i = 0; i < n; i++)
    {
      p[i] = 1.35e7;
      h[i] = 7.e5;
    }

  MLoiSpanD_h spans_liq = { { Loi_en_h::RHO, SpanD(rhol) }, { Loi_en_h::RHO_DP, SpanD(drhol_dp) }, { Loi_en_h::RHO_DH, SpanD(drhol_dhl) },
    { Loi_en_h::CP, SpanD(Cpl) }, { Loi_en_h::CP_DP, SpanD(dCpl_dp) }, { Loi_en_h::CP_DH, SpanD(dCpl_dhl) },
    { Loi_en_h::T, SpanD(Tl) }, { Loi_en_h::T_DP, SpanD(dTl_dp) }, { Loi_en_h::T_DH, SpanD(dTl_dhl) },
    { Loi_en_h::MU, SpanD(mul) }, {Loi_en_h::MU_DP, SpanD(dmul_dp) }, { Loi_en_h::MU_DH, SpanD(dmul_dhl) },
    { Loi_en_h::LAMBDA, SpanD(lambdal) }, { Loi_en_h::LAMBDA_DP, SpanD(dlambdal_dp) }, { Loi_en_h::LAMBDA_DH, SpanD(dlambdal_dhl) },
    { Loi_en_h::SIGMA, SpanD(sigma) }, { Loi_en_h::SIGMA_DP, SpanD(dsigmap_dp) } };

  const SpanD P = SpanD(p), H = SpanD(h);

  int i_out = 0, nb_out = (int) spans_liq.size();
  ArrOfInt tmp(n);
  EOS_Error_Field ferr(tmp);

  EOS_Field H_fld("Enthalpy", "h", (int) H.size(), (double*) H.begin()), P_fld("Pressure", "P", (int) P.size(), (double*) P.begin());

  // test liquid
  cout << "------------ TEST LIQUID -------------" << endl;
  for (auto &itr : spans_liq)
    {
      Loi_en_h prop_ = itr.first;
      SpanD span_ = itr.second;
      EOS_Field z_fld(EOS_prop_en_h[(int) prop_][0], EOS_prop_en_h[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
      EOS_Error cr = liquid.compute(P_fld, H_fld, z_fld, ferr);
      cout << "Property of LIQUID ENUM " << (int) prop_ << endl;
      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }

  // test steam
  cout << "------------ TEST STEAM -------------" << endl;
  for (int i = 0; i < n; i++)
    {
      p[i] = 15.e6;
      h[i] = 3.0e6;
    }

  for (auto &itr : spans_liq)
    {
      Loi_en_h prop_ = itr.first;
      SpanD span_ = itr.second;
      EOS_Field z_fld(EOS_prop_en_h[(int) prop_][0], EOS_prop_en_h[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
      EOS_Error cr = steam.compute(P_fld, H_fld, z_fld, ferr);
      cout << "Property of STEAM ENUM " << (int) prop_ << endl;
      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }

  // test saturation
  cout << "------------ TEST SAT -------------" << endl;
  VectorD Tsatp(n), dTsatp_dp(n), hlsatp(n), dhlsatp_dp(n), hvsatp(n), dhvsatp_dp(n),
      rholsatp(n), drholsatp_dp(n), rhovsatp(n), drhovsatp_dp(n),
      Cplsatp(n), dCplsatp_dp(n), Cpvsatp(n), dCpvsatp_dp(n);

  MSatSpanD spans_sat = { { SAT::T_SAT, SpanD(Tsatp) }, { SAT::T_SAT_DP, SpanD(dTsatp_dp) },
    { SAT::HL_SAT, SpanD(hlsatp) }, { SAT::HL_SAT_DP, SpanD(dhlsatp_dp) },
    { SAT::RHOL_SAT, SpanD(rholsatp) },{ SAT::RHOL_SAT_DP, SpanD(drholsatp_dp) },
    { SAT::CPL_SAT, SpanD(Cplsatp) }, { SAT::CPL_SAT_DP, SpanD(dCplsatp_dp) } };

  for (auto &itr : spans_sat)
    {
      SAT prop_ = itr.first;
      SpanD span_ = itr.second;
      EOS_Field z_fld(EOS_prop_sat[(int) prop_][0], EOS_prop_sat[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
      EOS_Error cr = liquid.compute(P_fld, z_fld, ferr);
      cout << "Property of LIQUID SAT ENUM " << (int) prop_ << endl;
      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }

  MSatSpanD spans_sat_v = { { SAT::T_SAT, SpanD(Tsatp) }, { SAT::T_SAT_DP, SpanD(dTsatp_dp) },
    { SAT::HV_SAT, SpanD(hvsatp) }, { SAT::HV_SAT_DP, SpanD(dhvsatp_dp) },
    { SAT::RHOV_SAT, SpanD(rhovsatp) }, { SAT::RHOV_SAT_DP, SpanD(drhovsatp_dp) },
    { SAT::CPV_SAT, SpanD(Cpvsatp) }, { SAT::CPV_SAT_DP, SpanD(dCpvsatp_dp) } };

  for (auto &itr : spans_sat_v)
    {
      SAT prop_ = itr.first;
      SpanD span_ = itr.second;
      EOS_Field z_fld(EOS_prop_sat[(int) prop_][0], EOS_prop_sat[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
      EOS_Error cr = steam.compute(P_fld, z_fld, ferr);
      cout << "Property of STEAM SAT ENUM " << (int) prop_ << endl;
      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }
    
  // test all
  cout << "------------ TEST ALL -------------" << endl;
  EOS_Fields flds_out(nb_out);

  for (auto &itr : spans_liq)
    {
      Loi_en_h prop_ = itr.first;
      SpanD span_ = itr.second;
      flds_out[i_out++] = EOS_Field(EOS_prop_en_h[(int) prop_][0], EOS_prop_en_h[(int) prop_][1], (int) span_.size(), (double*) span_.begin());
    }

  EOS_Error cr = liquid.compute(P_fld, H_fld, flds_out, ferr);

  for (auto &itr : spans_liq)
    {
      Loi_en_h prop_ = itr.first;
      SpanD span_ = itr.second;
      cout << "Property of ENUM " << (int) prop_ << endl;

      for (auto &itr2 : span_)
        cout << "Value :  " << itr2 << " : ERROR : " << (int) cr << endl;
      cout << "--------------------------------------" << endl;
    }

  return 0;
}
