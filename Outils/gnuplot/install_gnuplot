#!/bin/bash
gnuplot=$1
Build=$TRUST_ROOT/exec/gnuplot/lib
[ ! -d ${Build} ] && echo Creating ${Build} directory && mkdir -p ${Build}


# recuperation des packages
for file in `ls $TRUST_ROOT/externalpackages/gnuplot/*`
do
  ln -sf $file .
done
let i=0
for package in $gnuplot
do
   echo "***************************************"
   echo "Trying to install ${package%.tar.gz}..."
   echo "***************************************"
   let i=$i+1
   gunzip -c $package > ${package%.gz}
   tar xf ${package%.gz}
   rm -f ${package%.gz}
   cd ${package%.tar.gz}
   ./configure --prefix=$TRUST_ROOT/exec/gnuplot --with-texdir=$TRUST_ROOT/exec/gnuplot --with-qt=no --disable-wxwidgets --without-lua --without-tutorial --with-readline=builtin --with-gd=$TRUST_ROOT/exec/python 2>&1 || exit -1
   # 17-05-2019: if you update gnuplot to a new version using cmake, use cmake from conda as is the case for gmsh
   $TRUST_MAKE || exit -1
   make install || echo error on installation, but we hope that is ok
   source $TRUST_ROOT/env_TRUST.sh 1>/dev/null 2>&1 # LD_LIBRARY_PATH
   echo "set terminal png" | $TRUST_ROOT/exec/gnuplot/bin/gnuplot
   [ $? -ne 0 ] && exit -1
   cd ..
   rm -r -f ${package%.tar.gz}
done
# on retire les liens 
for file in `ls $TRUST_ROOT/externalpackages/gnuplot/*`
do
 f=`basename $file`
 [ -h $f ] && rm  $f 
done

# Pour avoir la meme palette que gnuplot 4:
echo "set colors classic # Meme palette que gnuplot 4" >> $TRUST_ROOT/exec/gnuplot/share/gnuplot/*/gnuplotrc

exit 0
