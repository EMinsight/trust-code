#!/bin/bash
# Script de creation a partir d'une version complete de TRUST
# Soit d'une version sans les sources TRUST
# Soit d'une version avec le Noyau uniquement

echo "Usage: `basename $0` ./TRUST_X.Y.Z.tgz [-install [-remote hostname]] [-without_source | -kernel_only]"
[ ${#1} = 0 ] && exit
[ ${#2} = 0 ] && exit
paquet=`basename $1`
version=`echo $paquet | sed 's/TRUST_//' | sed 's/.tgz//'`
paquet=`pwd`/$paquet
[ ! -f $paquet ] && echo "$paquet file not found" && exit
export install=0 	&& [ "$2" = -install ]	&& install=1 	&& shift
export remote=0 	&& [ "$2" = -remote ]	&& remote="-remote $3" && shift && shift
export kind=""	 	&& [ "$2" != "" ] 	&& kind=$2
[ "$kind" != "-without_source" ] && [ "$kind" != "-kernel_only" ] && echo "No option: -without_source or -kernel_only" && exit
new_paquet=${paquet%.tgz}"-"${kind#-}".tgz"
#
export rep=`mktemp_ -d`
cd $rep

# On detarre le paquet TRUST
echo "Extraction of $paquet with $kind..."
tar xvfz $paquet

# On applique un traitement selon l'option
# Ne pas utiliser env/rep.TRUST qui n'est plus
# gere en configuration
cd $rep/TRUST_$version
echo "  we modify `pwd`"

##################################
# version sans les sources TRUST #
##################################
if [ $kind = -without_source ]
then
   # On efface les sources de TRUST
   for dir in `find . -name make.include`
   do
      rm -r -f `dirname $dir`
   done
   
   # On efface la documentation qui est relative a TRUST
   rm -f doc/html.tar.gz doc/doxygen*
   rm -f -r doc/html doc/Coverage
   
####################################
# version avec le Noyau uniquement #
####################################
elif [ $kind = -kernel_only ]
then
   # On efface les sources autres que celles du Kernel et de MAIN pour construire la version
   for dir in `find . -name make.include | grep -v ./src/Kernel | grep -v ./src/MAIN`
   do
      rm -r -f `dirname $dir`
   done
  
   # On efface les fiches de validation qui ne sont pas Kernel
   for fiche in `find Validation/Rapports_automatiques -type d  -name src  | grep -v /Kernel_`
   do 
      rm -r -f  `dirname $fiche`
   done
  
   # On ne garde que les cas tests des repertoires Kernel
   cd tests
   kernel_tmp=`mktemp_ -d`
   mv * $kernel_tmp
   for test_kernel in `cd $kernel_tmp;find . -type d -name Kernel'*'`
   do
      parent_dir=`dirname $test_kernel`
      mkdir -p $parent_dir
      mv $kernel_tmp/$test_kernel $parent_dir/.
   done
   rm -r -f $kernel_tmp 
   cd ..
  
   # On efface la documentation qui est relative a TRUST
   rm -f doc/html.tar.gz doc/doxygen*
   rm -f -r doc/html doc/TRUST doc/Validation
   cd doc/Coverage
   tar xfz cpp.gcov.tar.gz
   find . -name '*'.gcov -exec grep -L TRUST_ROOT/src/Kernel {} \; | xargs rm -f
   rm -f cpp.gcov.tar.gz
   tar cfz cpp.gcov.tar.gz *.gcov
   rm -f *.gcov
   cd -
  
   # On efface les binaires de TRUST
   rm -f exec.*.gz

fi

#######################
# On recree le paquet #
#######################
cd ..
tar zcf $new_paquet .

echo "The $new_paquet package is created."
[ $kind = -without_source ] && echo "  It contains a version without the TRUST sources and without the associated Doxygen documentation."
[ $kind = -kernel_only ] && echo "  It contains a TRUST kernel version without the associated Doxygen documentation."
echo " "
cd `dirname $new_paquet`
rm -r -f $rep

# On teste l'installation du nouveau paquet si -install
[ $install = 1 ] && simule_install_TRUST $new_paquet $remote

