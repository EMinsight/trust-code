#!/bin/bash

[ ! -f ./configure ] && echo "`basename $0` must be run where it is located." && exit -1
TRUST_ROOT_SA=$TRUST_ROOT
export TRUST_ROOT=`pwd`
first=1
[ "$TRUST_ROOT" = "$TRUST_ROOT_SA" ] && [ "$TRUST_ENV" != "" ]  && first=0
mkdir -p lib exec env
( cd env; ln -sf ../env_src/* .)

# Check prerequis
bin/Installer_TRUST -check_prerequis || exit -1


[ ! -d externalpackages ] && [ ! -L externalpackages ] && echo "You need to download externalpackages before configuring"&& export TRUST_ROOT_VERSION=`awk '/version/ && /Release notes/ {print $4;exit}' $TRUST_ROOT/RELEASE_NOTES`&& echo wget http://downloads.sourceforge.net/project/trust-platform/externalpackages_$TRUST_ROOT_VERSION.tar && exit -1
###############################
# Clean old directories (<v169)
###############################
reps="ALE EF Front_tracking_discontinu Kernel MAIN P1NCP1B Phase_field Rayonnement Rayonnement_semi_transp ThHyd ThSol UtilitairesAssemblages VDF VEF Zoom"
for rep in $reps
do
   [ -d $rep ] && rm -r -f $rep
done

#########################################
# Creation des liens avec les autres VOBS
#########################################
# reps="../Tests_TRUST/tests ../Doc_TRUST/doc ../Doc_TRUST/Modeles ../Doc_TRUST/Milieux_reference ../Doc_TRUST/Word ../Doc_TRUST/CreDoc ../Doc_TRUST/form ../Doc_TRUST/IHM ../Pre_Post_TRUST/VisIt ../Pre_Post_TRUST/Gmsh ../Pre_Post_TRUST/Outils"
# ../Doc_TRUST/Word ../Doc_TRUST/CreDoc ../Doc_TRUST/form n'existent plus
# reps="../Tests_TRUST/tests ../Doc_TRUST/doc ../Doc_TRUST/Modeles ../Doc_TRUST/Milieux_reference ../Doc_TRUST/IHM ../Pre_Post_TRUST/VisIt ../Pre_Post_TRUST/Gmsh ../Pre_Post_TRUST/Outils"
# cf. ToDo:  Time for the 1.7.1 to clean Milieux_reference, Modeles and IHM
# VisIt and Gmsh directories moved to Outils
reps="../Tests_TRUST/tests ../Doc_TRUST/doc ../Pre_Post_TRUST/Outils"
for rep in $reps
do 
   # Eventuelle substitution pour les VOBs en Noyau et non TRUST
   # Attention TRUST_Awk n'est pas encore defini...
   [ ! -d $rep ] && rep=`echo $rep | awk '{sub("TRUST","Noyau",$0);print $0}'`
   if [ -d $rep ]
   then
      r=`basename $rep`
      [ ! -d $r ]  && ln -s -f $rep $r && echo "Link created: $rep ->" $r
   fi
done

echo "----------------------------------------------------------------------------------------------------------------------------"
echo "Usage: `basename $0` "
echo "[-help]                           Print help of the different configure options."
echo "[-disable-optionals]              Disable all optionals librairies and tools" 
echo "[-add_search=<dir>]               Add a directory to the defaults path to search a tool."
echo "[-c++=<prog>]                     Force the use of a specified C++ compiler."
echo "[-cc=<prog>]                      Force the use of a specified C compiler."
echo "[-fc=<prog>]                      Force the use of a specified Fortran compiler."
echo "[-cxxflags=<flags>]               Add C++ compiler options."
echo "[-cflags=<flags>]                 Add C compiler options."
echo "[-fflags=<flags>]                 Add Fortran compiler options."
echo "[-force_provided_mpich]           Use the provided MPICH `awk '/version=/ {gsub("version=","",$0);print $0}' ThirdPart/src/LIBMPI/Installer_mpich` version (default if a native and valid MPI is not found)."
echo "[-force_provided_openmpi]         Use the provided OpenMPI `awk '/default_version=/ {gsub("default_version=","",$0);print $0}' ThirdPart/src/LIBMPI/Installer_openmpi` version."
echo "[-force_old_openmpi]              Download and use the OpenMPI 1.2.9 version (valgrind free)."
echo "[-force_latest_openmpi]           Download and use the OpenMPI `awk '/latest_version=/ {gsub("latest_version=","",$0);print $0}' ThirdPart/src/LIBMPI/Installer_openmpi` version."
echo "[-force_even_unsupported]         Force the configure even the compiler/OS is not supported."
echo "[-force_petsc_have_cuda]          Use the latest PETSc version (petsc-dev) and try to activate the GPU support."
echo "[-force_petsc_have_openmp]        Use the latest PETSc version (petsc-dev) and try to activate the OpenMP support."
echo "[-disable-petsc]                  Disable PETSc library installation."
echo "[-disable-med]                    Disable MED library installation."
echo "[-disable-metis]                  Disable metis library installation."
echo "[-disable-medcoupling]            Disable MEDCoupling library installation."
echo "[-disable-mpi]                    Disable MPI library detection/installation and build a non-parallel version of the application."
echo "[-disable-ccache]                 Disable ccache detetction/installation."
echo "[-disable-valgrind]               Disable valgrind installation and build."
echo "[-disable-gnuplot]                Disable gnuplot installation and build."
echo "[-disable-gmsh]                   Disable Gmsh installation and build."
echo "[-without-visit]                  Do not install VisIt."
echo "[-download-visit]                 Download a sequential version of VisIt rather trying to build a parallel version."
echo "[-download-salome]                Download the Salome `awk -F= '/version_salome=/ {print $2}' env_src/configurer_env` version in the TRUST environment."
echo "[-clean]                          Clean the packages installed by configure."
echo "----------------------------------------------------------------------------------------------------------------------------"
CC=""
cc=""
F77=""
clean=""

LIST_THIRD_PARTY="PETSC MED MPI METIS MEDCOUPLING CCACHE GMSH VALGRIND GNUPLOT"

echo $0 $* "\$"* > configure.log

if [ "$1" = "-disable-optionals" ]
then
 shift
 $0 -disable-ccache -disable-med -disable-medcoupling -disable-petsc -disable-gnuplot -disable-valgrind -disable-mpi -disable-metis -without-visit -disable-gmsh $* 
 exit $?
fi

for THIRD_PARTY in $LIST_THIRD_PARTY
do
  command=TRUST_DISABLE_$THIRD_PARTY=0   
  eval $command       
done

export TRUST_WITHOUT_VISIT=0
export TRUST_DOWNLOAD_VISIT=0
export TRUST_DOWNLOAD_SALOME=0
var=env/configure.env && rm -f $var
echo "$0 called with options: $*"
while [ "$1" != "" ]
do
   if [ "${1%-help}" != $1 ]
   then
      exit
            
   elif [ "${1#-c++=}" != $1 ]
   then
      export TRUST_FORCE_CC=${1#-c++=}
      
   elif [ "${1#-cc=}" != $1 ]
   then
      export TRUST_FORCE_cc=${1#-cc=}
      
   elif [ "${1#-cxxflags=}" != $1 ]
   then
      export TRUST_ADD_CXXFLAGS=${1#-cxxflags=}
      
   elif [ "${1#-cflags=}" != $1 ]
   then
      export TRUST_ADD_CFLAGS=${1#-cflags=}
      
   elif [ "${1#-fflags=}" != $1 ]
   then
      export TRUST_ADD_FFLAGS=${1#-fflags=}
         
   elif [ "${1#-fc=}" != $1 ]
   then
      export TRUST_FORCE_F77=${1#-fc=}
      
   elif [ "${1#-add_search=}" != $1 ]
   then
      export TRUST_FORCE_SEARCH=${1#-add_search=}
      
   elif [ "${1#-force_even_unsupported}" != $1 ]
   then
      export TRUST_FORCE_SUPPORTED=1   
      
   elif [ "${1#-force_provided_openmpi}" != $1 ]
   then
      export TRUST_FORCE_PROVIDED_OPENMPI=1
      
   elif [ "${1#-force_old_openmpi}" != $1 ]
   then
      export TRUST_FORCE_OLD_OPENMPI=1

   elif [ "${1#-force_latest_openmpi}" != $1 ]
   then
      export TRUST_FORCE_LATEST_OPENMPI=1

   elif [ "${1#-force_provided_mpich}" != $1 ]
   then
      export TRUST_FORCE_PROVIDED_MPICH=1
      
   elif [ "${1#-force_petsc_have_cuda}" != $1 ]
   then
      export TRUST_FORCE_PETSC_HAVE_CUDA=1
      
   elif [ "${1#-force_petsc_have_openmp}" != $1 ]
   then
      export TRUST_FORCE_PETSC_HAVE_OPENMP=1

   elif [ "${1#-without-visit}" != $1 ]
   then
      export TRUST_WITHOUT_VISIT=1
      THIRD_PARTY="VISIT"
      REP_THIRD_PARTY=$TRUST_ROOT/Outils/VisIt
      ([ -d $REP_THIRD_PARTY ] && [ $first -eq 0 ] && cd $REP_THIRD_PARTY && echo "Disabling $THIRD_PARTY, so make clean:" && make clean)
      
   elif [ "${1#-download-visit}" != $1 ]
   then
      export TRUST_DOWNLOAD_VISIT=1  
       
   elif [ "${1#-download-salome}" != $1 ]
   then
      export TRUST_DOWNLOAD_SALOME=1  
       
   elif [ "${1#-clean}" != "$1" ]
   then
      export clean="clean"

   elif [ "${1#-disable-}" != "$1" ]
   then
      THIRD_PARTY=`echo ${1#-disable-} | awk '{print toupper($1)}'`
      
      REP_THIRD_PARTY=$TRUST_ROOT/ThirdPart/src/LIB$THIRD_PARTY
      [ "$THIRD_PARTY" = "GMSH" ] && REP_THIRD_PARTY=$TRUST_ROOT/Outils/Gmsh
      [ "$THIRD_PARTY" = "CCACHE" ] && REP_THIRD_PARTY=$TRUST_ROOT/env_src/ccache
      [ "$THIRD_PARTY" = "VALGRIND" ] && REP_THIRD_PARTY=$TRUST_ROOT/Outils/valgrind
      [ "$THIRD_PARTY" = "GNUPLOT" ] && REP_THIRD_PARTY=$TRUST_ROOT/Outils/gnuplot
      if [ ! -d $REP_THIRD_PARTY ]
      then
         echo "$1 option not available cause $REP_THIRD_PARTY is not installed."
	 exit -1
      fi
      
      testv="echo \$TRUST_DISABLE_$THIRD_PARTY"
      res=`eval $testv`
      if [ "$res" = "" ] 
	  then
	  echo "$1 option not available cause $THIRD_PARTY is not in list"
	  exit -1
      fi
      
      (cd $REP_THIRD_PARTY && [ $first -eq 0 ] && echo "Disabling $THIRD_PARTY, so make clean:"&&make clean)
      command=TRUST_DISABLE_$THIRD_PARTY=1   
      eval $command       
       
   else   
      echo "Unknown option $1." 
      exit -1
   fi
   shift
done
for THIRD_PARTY in $LIST_THIRD_PARTY 
do
   VAR=TRUST_DISABLE_$THIRD_PARTY
   echo "$VAR=${!VAR} && export $VAR 	# Disable/enable $THIRD_PARTY"  						>> $var 
done
echo "TRUST_WITHOUT_VISIT=$TRUST_WITHOUT_VISIT && export TRUST_WITHOUT_VISIT		# Disable/enable VisIt" 	>> $var
echo "TRUST_DOWNLOAD_VISIT=$TRUST_DOWNLOAD_VISIT && export TRUST_DOWNLOAD_VISIT 	# Download or build VisIt" 	>> $var
echo "TRUST_DOWNLOAD_SALOME=$TRUST_DOWNLOAD_SALOME && export TRUST_DOWNLOAD_SALOME 	# Download Salome" 		>> $var   

################################
# Check options for some hosts #
################################
HOST=`hostname`
#Since 1.6.9, MPICH is the default MPI installed.
#if [ "$TRUST_DOWNLOAD_VISIT" != 1 ] && [ "$TRUST_WITHOUT_VISIT" != 1 ] && [ "$TRUST_FORCE_PROVIDED_MPICH" != 1 ]
#then
#   if [ $HOST = aline2 ] || [ $HOST = bellety ]
#   then
#      echo
#      echo "You need to run the configure with the option -force_provided_mpich to build a parallel version for VisIt on $HOST."
#      echo "OpenMPI version for MPI will crash for VisIt 2.5.2 and 2.6.0."
#      exit -1
#   fi
#fi
if [ ${HOST#mezel} != $HOST ] && [ "$TRUST_FORCE_PROVIDED_MPICH" != 1 ]
then
   echo
   echo "You need to run the configure with the option -force_provided_mpich on $HOST cause MPI native are too old/buggy"
   echo "and the provided OpenMPI does not use correctly Infiniband network."
   exit -1
fi

####################################################
# Configuration et initialisation de l'environnement
####################################################
rm -f env/env_TRUST.sh
sed "s?TRUST_ROOT=path_to_trio?TRUST_ROOT=$TRUST_ROOT?" env_src/env_TRUST.sh.in > env/env_TRUST.sh
chmod gou+x env/env_TRUST.sh

cd env
./configurer_env $clean || exit -1
cd ..
echo
source ./env/env_TRUST.sh 1>/dev/null 2>&1

##########################################
# Creation d'un Makefile sous $TRUST_ROOT
##########################################
cd $TRUST_ROOT
if [ "$clean" = "" ]
then
   # echo $ECHO_OPTS "all:\n\tcompile" 				> $TRUST_ROOT/Makefile
   echo $ECHO_OPTS "all:\n\t(. env/env_TRUST.sh ;env cibles=\"micro_kernel_opt numeric_kernel_opt standard_kernel_opt opt micro_kernel_debug numeric_kernel_debug standard_kernel_debug debug\" monodir)"  > $TRUST_ROOT/Makefile
   echo $ECHO_OPTS "tools:\n\t(. env/env_TRUST.sh ;compile tools)" >> $TRUST_ROOT/Makefile
   echo  $ECHO_OPTS "optim:\t opt" 	>> $TRUST_ROOT/Makefile
   for cible in opt debug prof gcov opt_avx semi_opt
   do
     echo $ECHO_OPTS "${cible}:\n\t(. env/env_TRUST.sh ;env cibles=\"micro_kernel_${cible} numeric_kernel_${cible} standard_kernel_${cible} ${cible}\" monodir)" >> $TRUST_ROOT/Makefile
   done
   echo $ECHO_OPTS "clean:\n\t(. env/env_TRUST.sh ;compile clean)" >> $TRUST_ROOT/Makefile
   echo $ECHO_OPTS "depend:\n\t#fait_makefile" 			>> $TRUST_ROOT/Makefile
   echo $ECHO_OPTS "doxygen:\n\t(. env/env_TRUST.sh ;make_Doxyfile)" 			>> $TRUST_ROOT/Makefile
   #echo $ECHO_OPTS "init:\n\t. env/env_TRUST.sh" 		>> $TRUST_ROOT/Makefile
   echo $ECHO_OPTS "check:\n\t(. env/env_TRUST.sh ;echo 0 | lance_test $exec_opt $TRUST_ROOT )" >> $TRUST_ROOT/Makefile  
   echo $ECHO_OPTS "check_optim:\tcheck" >> $TRUST_ROOT/Makefile  
   echo $ECHO_OPTS "check_debug:\n\t(. env/env_TRUST.sh ;echo 0 | lance_test $exec_debug $TRUST_ROOT )" >> $TRUST_ROOT/Makefile  
   [ "${#ECHO_OPTS}" = 0 ] && echo "Error: Check "$TRUST_ROOT"/Makefile !!! (ECHO_OPTS="$ECHO_OPTS")" && exit -1
   ##################################
   # Desormais on recree les makefile
   ##################################   
   make depend 
   echo $ECHO_OPTS "# File \$TRUST_ROOT/Makefile is created."
   echo $ECHO_OPTS "# File \$TRUST_ROOT/configure.log is created."
   echo $ECHO_OPTS "# To initialize the TRUST environment, run:"
   echo $ECHO_OPTS "source env/env_TRUST.sh"
   echo $ECHO_OPTS "# To build TRUST, run:"
   echo $ECHO_OPTS "make"
fi
exit 0
