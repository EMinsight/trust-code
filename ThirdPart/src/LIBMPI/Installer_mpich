#!/bin/bash
# Install MPICH (standard or Infiniband tuned version)

if [ -f /usr/lib64/libibverbs.so ] && [ -f /usr/include/infiniband/verbs.h ] && [ -f /usr/include/infiniband/mad.h ] && false
then
  # Find infiniband so prefer mvapich to mpich: 
  echo $ECHO_OPTS "Detecting Infiniband. So installing mvapich...\c"
  ###########
  # MVAPICH #
  ###########
  package=mvapich2-2.1.tgz
  http=http://mvapich.cse.ohio-state.edu/download/mvapich2
  src=${package%.tgz}
  # /usr/include/infiniband/mad.h is important for performance. See:
  # http://mailman.cse.ohio-state.edu/pipermail/mvapich-discuss/2013-June/004466.html
  # So don't use --disable-mcast
  option_configure="--enable-fast=all,O3" # --disable-fc produce an error: "...able to determine Fortran 90 KIND values for either address-sized integers or offset-sized integer"
else
  #########
  # MPICH #
  #########
  default_version=3.2
  latest_version=4.0.2 # Blocages MUMPS sur Fedora 34 avec 3.4.1
  # Cas ou l'on force la version la plus recente:
  if [ "$TRUST_FORCE_LATEST_MPICH" = 1 ]
  then
     version=$latest_version
  else # ToDo remonter dans le configure ?
     version=$default_version
     # Ubuntu 22 et Fedora 34, GNU>=11.0.0
     if [ "`echo $TRUST_VERSION_GNU | awk -F. '{if ($1*100+$2*10+$3>=1100) print -force_latest_mpich}'`" != "" ]
     then
        echo "Error, use -force_latest_mpich cause $version MPICH not supported with GNU compilers >= 11" && exit -1
     fi
  fi
  package=mpich-$version.tar.gz
  src=${package%.tar.gz}
  http=http://www.mpich.org/static/downloads/$version
  src=${package%.tar.gz}
  if [ "$TRUST_FORCE_LATEST_MPICH" = 1 ]
  then
     option_configure="--enable-shared --enable-g=meminit --enable-fast=all,O3 --enable-yield=sched_yield --with-device=ch4:ofi"
  else
  # --enable-g=meminit,dbg,mem pour debugger MPICH avec valgrind (ce n'est pas ce que l'on veut)
  # --enable-shared (pour utiliser le MPI wrapper de valgrind)
  # http://lists.mcs.anl.gov/pipermail/mpich-discuss/2011-June/010273.html
  # By default, --with-device=ch3:nemesis but slow if number of CPUs > number of cores: (example PAR_Cx 9)
  # But ch3:sock much slower (latence and bandwith!) than OpenMPI when CPUs<=number of cores (example PAR_Bilans_VEF 2)!
  # http://wiki.mpich.org/mpich/index.php/Frequently_Asked_Questions#Q:_Why_does_my_MPI_program_run_much_slower_when_I_use_more_processes.3F
  # OK problem solved with --enable-yield=sched_yield which fixes the performance problem: https://svn.mcs.anl.gov/repos/mpi/mpich2/trunk/CHANGES
  # --enable-g=dbg,meminit http://wiki.mpich.org/mpich/index.php/Support_for_Debugging_Memory_Allocation
  # --enable-shared is added cause static MPICH library cause a crash during Cathare-TRUST couplings
  # disable-fc  ne compile pas depuis 3.1.4 on ne peut pas desactiver le fortran pour petsc 
  # NOFC="--disable-fc"
  NOFC=""
  option_configure="--enable-shared --enable-g=meminit $NOFC --enable-fast=all,O3 --enable-yield=sched_yield"
  # Try to build MPICH with valgrind include: Nothing is changed to avoid warnings with MPICH&Valgrind in //
  #option_configure="--enable-g=meminit --disable-fc --enable-fast=all,O3 --enable-yield=sched_yield $CPPFLAGS"
  #INCLUDE_VALGRIND=$TRUST_ROOT/exec/valgrind/include/valgrind && [ -d $INCLUDE_VALGRIND ] && option_configure=$option_configure" CPPFLAGS=-I$INCLUDE_VALGRIND"
  fi
fi

# Verification que le package present est bien valide (probleme rencontre lors d'un download incorrect)
#[ "`file $package 2>&1 | grep gzip`" = "" ] && rm -f $package

# On telecharge le package s'il n'est pas la
[ ! -f $package ] && wget_ $http/$package

install=`pwd`/mpich
install=$MPI_ROOT
if [ ! -d $install ] || [ $package -nt $install ] || [ ! -d $src ]
then
   gunzip -c $package | tar -xf -
fi
cd $src 

###############################
# Lancement de la configuration
###############################
export F77=$TRUST_F77_BASE
export FC=$TRUST_F77_BASE
export CC=$TRUST_cc_BASE
export CXX=$TRUST_CC_BASE
export CXXFLAGS="-fPIC"
export CFLAGS="-fPIC"
export FFLAGS="-fPIC -std=legacy"
# MPICH meme recent 3.3.1 ne compile pas encore avec gfortran 10 sans allow-argument-mismatch:
TRUST_GNU_VERSION=`[ "${TRUST_CC_BASE%g++}" != "$TRUST_CC_BASE" ] && $TRUST_CC_BASE -v 2>&1 | awk '/gcc / && /version / {i=1;while(split($(i),a,".")==1) i++;print $(i)}'`
[ `echo $TRUST_GNU_VERSION | awk -F. '{print ($1>=10)}'` = 1 ] && FFLAGS=$FFLAGS" -fallow-argument-mismatch"
export FCFLAGS=$FFLAGS
# La variable MV est definie a sta sur certaines machines et pose probleme:
unset MV
./configure --help 2>&1 1>../configure.help
./configure --prefix=$install $option_configure || exit -1

#############################
# Lancement de la compilation
#############################
$TRUST_MAKE || exit -1 # Yes, parallel build supported since MPICH 1.5

#######################
# Fin de l'installation
#######################
make install || exit -1

cd ..
rm -r -f $src configure.help

exit 0
