#!/bin/bash
# --
# Author : Eli LAUCOIN (CEA)
# --

baltik_environnement_error() {
    echo "-----------------------------------------"
    echo "ERROR : undefined variable BALTIK_ROOT   "
    echo ""
    echo "Please, install BALTIK and run :         "
    echo "  source /path/to/BALTIK/bin/baltik_init "
    echo "-----------------------------------------"
    echo ""
    exit 1
}
baltik_environnement_init()
{
	script=$0
	bindir=`dirname $script`
	cd `dirname $bindir`
	pwd
}

# initialisation de l'etat de la variable BALTIK_ROOT
BALTIK_ROOT=`baltik_environnement_init`
# verification de l'etat de la variable BALTIK_ROOT
if [ "${BALTIK_ROOT}" = "" ]
then
    baltik_environnement_error
fi


# chargement des fonctions d'affichage des messages d'erreur
. ${BALTIK_ROOT}/bin/baltik_errors

# chargement des fonctions d'analyse d'un fichier de configuration
. ${BALTIK_ROOT}/bin/baltik_configuration_parsing

# chargement des fonctions de correspondance nom variable OPT
. ${BALTIK_ROOT}/bin/baltik_OPT_management

# verification/chargement de TRUST
. ${BALTIK_ROOT}/bin/baltik_check_init_TRUST


# verification de l'etat de la variable TRUST_ROOT
if [ "${TRUST_ROOT}" = "" ]
then
    TRUST_environnement_error
fi
reduit=0
[ "$1" = "reduit" ] && reduit=1 && shift

# verification du nombre d'arguments
if [ $# -ne 0 ]
then
    number_of_compilation_arguments_error
fi


# recuperation des options de compilation

#OPT=`TRUST_opt_from_name $1`
#[  $? != 0 ] && eval $OPT


OPT=_opt
export OPT


# initialisation des variables utiles
project_directory=`pwd`
export project_directory

project_configuration_file="${project_directory}/project.cfg"
if  [ ! -e $project_configuration_file ] || [ ! -f $project_configuration_file ] 
then
    no_configuration_file_error "$project_directory=$"
fi

project_description=`extract_section "$project_configuration_file" description`

project_executable_name=`extract_executable_name ${project_description}`

project_executable_name="${project_executable_name}${OPT}"

project_validation_directory="${project_directory}/build/Validation"

project_executable_name="${project_directory}/${project_executable_name}"

exec=${project_executable_name}
export exec

# lancement des tests
mkdir -p $project_validation_directory
cd $project_validation_directory

# Pas encore OK .... il faudrait regarder les fiches....
# on essaye ....
Rapports_auto_root=${project_directory}/share
export Rapports_auto_root

SJOB=""
if [ "x$TRUST_USE_Sjob" = "x1" ]
then
  SJOB="-parallel_sjob"
fi
echo "Launch of cases (you can skip a PRM by touching a file 'skip_prm' in the associated validation form directory)"
Validation_outil=$TRUST_ROOT/Validation/Outils/Genere_courbe
. ${Validation_outil}/scripts/scripts_validation.sh 1>/dev/null

if [ "x$TRUST_USE_Sjob" = "x1" ]
then
  echo Using Sjob for validation
  $TRUST_ROOT/bin/Sjob/Squeue 1> /dev/null 2>&1
  if [ $? -ne 0 ] 
  then
    echo
    echo *** Sserver not started unable to run with Sjob ***
    echo 
    exit 1
  else
     echo *** Sserver detected ****
  fi


  Generate_makefile_validation $SJOB
  make -j$TRUST_NB_PROCS
fi

${Validation_outil}/scripts/Lance_gen_fiche

if [ $reduit -ne 1 ]
then
  echo "Launch of deps cases"
  Rapports_auto_root=${project_directory}/build/tests/share/deps
  export Rapports_auto_root
  ${Validation_outil}/scripts/Lance_gen_fiche

  Rapports_auto_root=${project_directory}/build/tests/share/all
  export Rapports_auto_root
fi

echo
echo
echo Checking pdf and tgz
echo

verif_archives

status=$PB
 rm -f ${project_directory}/validation.pdf
if [ $status -eq 0 ]
then
 bash ${Validation_outil}/scripts/rapport_global archives
 mv archives/build_prov/fic.pdf ${project_directory}/validation.pdf && rm -rf archives/build_prov
else
echo 
echo "Check   $project_validation_directory/BUILD/*/run.log and  $project_validation_directory/BUILD/*/arc.log"
fi
exit $status
