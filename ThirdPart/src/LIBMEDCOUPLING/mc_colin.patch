diff --git a/CMakeLists.txt b/CMakeLists.txt
index f130ad15..95260949 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -231,6 +231,7 @@ IF(MEDCOUPLING_BUILD_DOC)
   SALOME_LOG_OPTIONAL_PACKAGE(Sphinx MEDCOUPLING_BUILD_DOC)
 ENDIF(MEDCOUPLING_BUILD_DOC)
 
+
 # Detection report
 SALOME_PACKAGE_REPORT_AND_CHECK()
 
diff --git a/resources/dev/mc_suppr_valgrind b/resources/dev/mc_suppr_valgrind
index 7f536fdc..9609c388 100644
--- a/resources/dev/mc_suppr_valgrind
+++ b/resources/dev/mc_suppr_valgrind
@@ -62,5 +62,11 @@
    fun:*PyInit*
 }
 
-
+{
+   <raise_excep>
+   Memcheck:Leak
+   fun:*alloc
+   ...
+   fun:_dl_catch_exception
+}
 
diff --git a/src/MEDCoupling/MEDCouplingUMesh.cxx b/src/MEDCoupling/MEDCouplingUMesh.cxx
index 76d748bd..b9a9d030 100755
--- a/src/MEDCoupling/MEDCouplingUMesh.cxx
+++ b/src/MEDCoupling/MEDCouplingUMesh.cxx
@@ -1340,6 +1340,8 @@ bool MEDCouplingUMesh::unPolyze()
  * This method performs operation only on polyhedrons in \b this. If no polyhedrons exists in \b this, \b this remains unchanged.
  * This method allows to merge if any coplanar 3DSurf cells that may appear in some polyhedrons cells.
  *
+ * \b WARNING: this method will not modify edges connectivity! Take a look at colinearizeEdges for that.
+ *
  * \param [in] eps is a relative precision that allows to establish if some 3D plane are coplanar or not. This epsilon is used to recenter around origin to have maximal
  *             precision.
  */
@@ -1376,6 +1378,84 @@ void MEDCouplingUMesh::simplifyPolyhedra(double eps)
     setConnectivity(connNew,connINew,false);
 }
 
+/*!
+ * This method expects that spaceDimension is equal to 3 and meshDimension equal to 3.
+ * This method performs operation only on polyhedrons in \b this. If no polyhedrons exists in \b this, \b this remains unchanged.
+ * This method allows to simplify edges of polyhedron cells so that consecutive colinear segments (with intermediate points
+ * not used by any other cell) are merged together.
+ *
+ * \param [in] eps is a relative precision that allows to establish if two consecutive 3D segments are colinear or not.
+ *
+ * \sa simplifyPolyhedra
+ */
+void MEDCouplingUMesh::colinearizeEdges(double eps)
+{
+  //
+  // Thanks to Antoine Gerschenfeld (CEA) for contributing this method!
+  //
+  using DAI = MCAuto<DataArrayIdType>;
+  checkFullyDefined();
+  if(getMeshDimension()!=3 || getSpaceDimension()!=3)
+    throw INTERP_KERNEL::Exception("MEDCouplingUMesh::colinearizeEdges() : works with meshdim=3 and spaceDim=3!");
+  double seps = sqrt(1-eps);
+  // Computing connectivities and correspondances : elements -> segments -> points
+  DAI E_Fi(DataArrayIdType::New()), E_F(DataArrayIdType::New()), F_Ei(DataArrayIdType::New()), F_E(DataArrayIdType::New()),
+         F_Si(DataArrayIdType::New()), F_S(DataArrayIdType::New()), S_Fi(DataArrayIdType::New()), S_F(DataArrayIdType::New()),
+         S_Pi(DataArrayIdType::New()), S_P(DataArrayIdType::New()), P_Si(DataArrayIdType::New()), P_S(DataArrayIdType::New());
+  MCAuto<MEDCouplingUMesh> m_f(buildDescendingConnectivity(E_F, E_Fi, F_E, F_Ei)),
+         m_s(m_f->buildDescendingConnectivity(F_S, F_Si, S_F, S_Fi)),
+         m_p(m_s->buildDescendingConnectivity(S_P, S_Pi, P_S, P_Si)); // E: elem, F: faces, S: segments (edges), P: points (vertices)
+  const mcIdType *S_Pp(S_P->begin()), *S_Pip(S_Pi->begin()), *P_Sp(P_S->begin()), *P_Sip(P_Si->begin());
+  std::set<mcIdType> pt_rem;
+  const mcIdType *m_pi = m_p->getNodalConnectivityIndex()->begin(),
+                 *m_pc = m_p->getNodalConnectivity()->begin();
+  double (*coord)[3] = (double (*)[3]) getCoords()->begin();
+  // Find all points only connected to exaclty 2 segments - they are the candidates for elimination
+  // Note that in 3D this can only happen for polyhedrons (when this happens at all)
+  DAI dsi = P_Si->deltaShiftIndex();
+  DAI cand = dsi->findIdsEqual(2);
+  for (const mcIdType& i: *cand)  // i is a point to be potentially eliminated, shared by 2 segs only
+    {
+      double n2[2] = {0., 0.}, scal = 0.; // n2 is a squared norm, scal is a scalar product
+      mcIdType p[2][2];                   // p[j][k] is the ID (in the coord array) of the k-th point of the j-th segment
+      for (mcIdType j = 0; j < 2; j++)
+        for (mcIdType k = 0; k < 2; k++)
+          {
+            mcIdType off1 = P_Sip[i] + j;   // offset to get ID of the j-th seg (around the i-th point) in the point->seg correspondance
+            mcIdType pt_id = P_Sp[off1] + k; // ID of the k-th point of the j-th seg in the point->seg correspondance
+            mcIdType pt_id2 = S_Pp[S_Pip[pt_id]]; // ID of the point in the point mesh
+            p[j][k] = m_pc[m_pi[pt_id2] + 1];  // Absolute ID, as read from the connectvity (+1 to skip type: NORM_POINT1)
+            // Just for fun, as initially written by Antoine :-)
+            // p[j][k] = m_pc[m_pi[S_P->getIJ(S_Pi->getIJ(P_S->getIJ(P_Si->getIJ(i, 0) + j, 0), 0) + k, 0)] + 1];
+          }
+      // Geometric test on scalar product
+      for (int d = 0; d < 3; d++) // dimension
+        {
+          for (int j = 0; j < 2; j++)
+            n2[j] += std::pow(coord[p[j][1]][d] - coord[p[j][0]][d], 2);
+          scal += (coord[p[1][1]][d] - coord[p[1][0]][d]) * (coord[p[0][1]][d] - coord[p[0][0]][d]);
+        }
+      if (scal * scal > seps * n2[0] * n2[1]) // seps is a sqrt for homogeneity
+        pt_rem.insert(m_pc[m_pi[i] + 1]);  // point should be removed
+    }
+  // Clean connectivity by filtering points to be removed:
+  DataArrayIdType *old_index = getNodalConnectivityIndex(), *old_conn = getNodalConnectivity();
+  DAI new_index(DataArrayIdType::New()), new_conn(DataArrayIdType::New());
+  const mcIdType *old_index_p(old_index->begin()), *old_conn_p(old_conn->begin());
+  for (mcIdType i = 0; i < getNumberOfCells(); i++)
+    {
+      new_index->pushBackSilent(new_conn->getNbOfElems());
+      for (mcIdType j = old_index_p[i]; j < old_index_p[i + 1]; j++)
+        {
+          // Keep point if it is not to be removed, or if is first in connectivity (TODO this last check could be removed?)
+          if (std::find(pt_rem.begin(), pt_rem.end(), old_conn_p[j]) == pt_rem.end() || j == old_index_p[i])
+            new_conn->pushBackSilent(old_conn_p[j]);
+        }
+    }
+  new_index->pushBackSilent(new_conn->getNbOfElems());
+  setConnectivity(new_conn, new_index);
+}
+
 /*!
  * This method returns all node ids used in the connectivity of \b this. The data array returned has to be dealt by the caller.
  * The returned node ids are sorted ascendingly. This method is close to MEDCouplingUMesh::getNodeIdsInUse except
diff --git a/src/MEDCoupling/MEDCouplingUMesh.hxx b/src/MEDCoupling/MEDCouplingUMesh.hxx
index b47c167f..3eca47ac 100644
--- a/src/MEDCoupling/MEDCouplingUMesh.hxx
+++ b/src/MEDCoupling/MEDCouplingUMesh.hxx
@@ -108,6 +108,7 @@ namespace MEDCoupling
     MEDCOUPLING_EXPORT void convertExtrudedPolyhedra();
     MEDCOUPLING_EXPORT bool unPolyze();
     MEDCOUPLING_EXPORT void simplifyPolyhedra(double eps);
+    MEDCOUPLING_EXPORT void colinearizeEdges(double eps);
     MEDCOUPLING_EXPORT MEDCouplingUMesh *buildSpreadZonesWithPoly() const;
     MEDCOUPLING_EXPORT std::vector<DataArrayIdType *> partitionBySpreadZone() const;
     MEDCOUPLING_EXPORT DataArrayIdType *computeFetchedNodeIds() const;
diff --git a/src/MEDCoupling_Swig/CMakeLists.txt b/src/MEDCoupling_Swig/CMakeLists.txt
index 125dda07..387a34a0 100644
--- a/src/MEDCoupling_Swig/CMakeLists.txt
+++ b/src/MEDCoupling_Swig/CMakeLists.txt
@@ -37,7 +37,7 @@ ENDIF()
 SET(SWIG_MODULE_MEDCoupling_EXTRA_FLAGS "${NUMPY_DEFINITIONS};${SCIPY_DEFINITIONS}")
 IF(MEDCOUPLING_USE_64BIT_IDS)
   STRING(APPEND SWIG_MODULE_MEDCoupling_EXTRA_FLAGS ";-DMEDCOUPLING_USE_64BIT_IDS")
-ENDIF(MEDCOUPLING_USE_64BIT_IDS)
+ENDIF()
 
 SET (MEDCoupling_SWIG_DPYS_FILES
     MEDCouplingCommon.i
diff --git a/src/MEDCoupling_Swig/MEDCouplingBasicsTest5.py b/src/MEDCoupling_Swig/MEDCouplingBasicsTest5.py
index c8864d1b..86477fee 100644
--- a/src/MEDCoupling_Swig/MEDCouplingBasicsTest5.py
+++ b/src/MEDCoupling_Swig/MEDCouplingBasicsTest5.py
@@ -2009,14 +2009,14 @@ class MEDCouplingBasicsTest5(unittest.TestCase):
         # Just to get a nice coords array ...
         mm = MEDCouplingCMesh(); arr = DataArrayDouble([0.0, 1.0,2.0])
         mm.setCoords(arr, arr);  mm = mm.buildUnstructured();   coo = mm.getCoords()
-         
+
         mesh = MEDCouplingUMesh("M", 2)
         mesh.setCoords(coo)
         c = [NORM_POLYGON, 0,1,4,7,6,3,  NORM_QUAD4, 1,2,5,4,  NORM_QUAD4,4,5,8,7]
         cI = [0, 7,12,17]
         mm.setConnectivity(DataArrayInt(c),DataArrayInt(cI))
         mm.checkConsistencyLight()
-        
+
         mm.colinearizeKeepingConform2D(eps)
         c = mm.getNodalConnectivity().getValues()
         cI = mm.getNodalConnectivityIndex().getValues()
@@ -4830,6 +4830,29 @@ class MEDCouplingBasicsTest5(unittest.TestCase):
         self.assertEqual(cI.getValues(), tgt_cI.getValues())
         pass
 
+    def testColinearizeEdges(self):
+        mesh = MEDCouplingUMesh('mesh', 3)
+        coo = DataArrayDouble([(0,0,0), (1,0,0), (2,0,0), (3,0,0),
+                               (0,0,3), (1,0,3), (2,0,3), (3,0,3),
+                               (0,1,0), (3,1,0),
+                               (0,1,3), (3,1,3)])
+        mesh.setCoords(coo)
+        c = DataArrayInt([NORM_POLYHED, 0,1,2,3,7,6,5,4,-1,  # front
+                                        9,8,10,11, -1,       # back
+                                        0,4,10,8,  -1,       # left
+                                        3,7,11,9,  -1,       # right
+                                        0,1,2,3,9,8,-1,      # bottom
+                                        4,5,6,7,11,10        # top
+                                        ])
+        cI = DataArrayInt([0, c.getNumberOfTuples()])
+        mesh.setConnectivity(c, cI)
+        mesh.colinearizeEdges(1.0e-8)
+        c, cI = mesh.getNodalConnectivity(), mesh.getNodalConnectivityIndex()
+        tgt_c = DataArrayInt([NORM_POLYHED, 0, 3, 7, 4, -1, 9, 8, 10, 11, -1, 0, 4, 10, 8, -1, 3, 7, 11, 9, -1, 0, 3, 9, 8, -1, 4, 7, 11, 10])
+        tgt_cI = DataArrayInt([0, 30])
+        self.assertEqual(c.getValues(), tgt_c.getValues())
+        self.assertEqual(cI.getValues(), tgt_cI.getValues())
+
     pass
 
 if __name__ == '__main__':
diff --git a/src/MEDCoupling_Swig/MEDCouplingCommon.i b/src/MEDCoupling_Swig/MEDCouplingCommon.i
index e971e534..0812ce07 100644
--- a/src/MEDCoupling_Swig/MEDCouplingCommon.i
+++ b/src/MEDCoupling_Swig/MEDCouplingCommon.i
@@ -3047,6 +3047,7 @@ namespace MEDCoupling
     void convertExtrudedPolyhedra();
     bool unPolyze();
     void simplifyPolyhedra(double eps);
+    void colinearizeEdges(double eps);
     MEDCouplingUMesh *buildSpreadZonesWithPoly() const;
     MEDCouplingUMesh *buildExtrudedMesh(const MEDCouplingUMesh *mesh1D, int policy);
   };
diff --git a/src/ParaMEDMEM/InterpKernelDEC.hxx b/src/ParaMEDMEM/InterpKernelDEC.hxx
index 95c40f70..f4b15632 100644
--- a/src/ParaMEDMEM/InterpKernelDEC.hxx
+++ b/src/ParaMEDMEM/InterpKernelDEC.hxx
@@ -130,8 +130,7 @@ namespace MEDCoupling
   public:  
     InterpKernelDEC();
     InterpKernelDEC(ProcessorGroup& source_group, ProcessorGroup& target_group);
-    InterpKernelDEC(const std::set<int>& src_ids, const std::set<int>& trg_ids,
-                    const MPI_Comm& world_comm=MPI_COMM_WORLD);
+    InterpKernelDEC(const std::set<int>& src_ids, const std::set<int>& trg_ids, const MPI_Comm& world_comm=MPI_COMM_WORLD);
     virtual ~InterpKernelDEC();
     void release();
 
diff --git a/src/ParaMEDMEM_Swig/ParaMEDMEMCommon.i b/src/ParaMEDMEM_Swig/ParaMEDMEMCommon.i
index 290da2a8..d47b8bf4 100644
--- a/src/ParaMEDMEM_Swig/ParaMEDMEMCommon.i
+++ b/src/ParaMEDMEM_Swig/ParaMEDMEMCommon.i
@@ -54,9 +54,7 @@ using namespace ICoCo;
 %include "ComponentTopology.hxx"
 %include "DEC.hxx"
 %include "DisjointDEC.hxx"
-%include "InterpKernelDEC.hxx"
 %include "StructuredCoincidentDEC.hxx"
-%include "OverlapDEC.hxx"
 
 %newobject MEDCoupling::ParaUMesh::New;
 %newobject MEDCoupling::ParaUMesh::getMesh;
@@ -75,6 +73,10 @@ using namespace ICoCo;
 %newobject MEDCoupling::ParaSkyLineArray::getSkyLineArray;
 %newobject MEDCoupling::ParaSkyLineArray::getGlobalIdsArray;
 
+%newobject MEDCoupling::InterpKernelDEC::_NewWithPG_internal;
+%newobject MEDCoupling::InterpKernelDEC::_NewWithComm_internal;
+%newobject MEDCoupling::OverlapDEC::_NewWithComm_internal;
+
 %feature("unref") ParaSkyLineArray "$this->decrRef();"
 %feature("unref") ParaUMesh "$this->decrRef();"
 %feature("unref") ParaDataArrayInt32 "$this->decrRef();"
@@ -274,16 +276,97 @@ namespace MEDCoupling
       }
     }
   };
-}
 
-/* This object can be used only if MED_ENABLE_FVM is defined*/
-#ifdef MED_ENABLE_FVM
-class NonCoincidentDEC : public DEC
-{
-public:
-  NonCoincidentDEC(ProcessorGroup& source, ProcessorGroup& target);
-};
-#endif
+  /* This object can be used only if MED_ENABLE_FVM is defined*/
+  #ifdef MED_ENABLE_FVM
+  class NonCoincidentDEC : public DEC
+  {
+  public:
+    NonCoincidentDEC(ProcessorGroup& source, ProcessorGroup& target);
+  };
+  #endif
+
+  class InterpKernelDEC : public DisjointDEC, public INTERP_KERNEL::InterpolationOptions
+  {
+    public:
+      InterpKernelDEC();
+      InterpKernelDEC(ProcessorGroup& source_group, ProcessorGroup& target_group);
+      InterpKernelDEC(const std::set<int>& src_ids, const std::set<int>& trg_ids); // hide last optional parameter!
+      virtual ~InterpKernelDEC();
+      void release();
+
+      void synchronize();
+      void recvData();
+      void recvData(double time);
+      void sendData();
+      void sendData(double time , double deltatime);
+      void prepareSourceDE();
+      void prepareTargetDE();
+
+      %extend {
+        // Provides a direct ctor for which the communicator can be passed with "MPI._addressof(the_com)":
+        InterpKernelDEC(const std::set<int>& src_ids, const std::set<int>& trg_ids, long long comm_ptr)
+        {
+            return new InterpKernelDEC(src_ids, trg_ids, *((MPI_Comm*)comm_ptr));
+        }
+
+        // This one should really not be called directly by the user since it still has an interface with a pointer to MPI_Comm 
+        // which Swig doesn't handle nicely.
+        // It is just here to provide a constructor taking a **pointer** to a comm - See pythoncode below.
+        static InterpKernelDEC* _NewWithPG_internal(ProcessorGroup& source_group, ProcessorGroup& target_group)
+        {
+          return new InterpKernelDEC(source_group,target_group);
+        }
+
+        static InterpKernelDEC* _NewWithComm_internal(const std::set<int>& src_ids, const std::set<int>& trg_ids, long long another_comm)
+        {
+          return new InterpKernelDEC(src_ids,trg_ids, *(MPI_Comm*)another_comm); // I know, ugly cast ...
+        }
+      }
+  };
+
+  class OverlapDEC : public DEC, public INTERP_KERNEL::InterpolationOptions
+  {
+      public:
+        OverlapDEC(const std::set<int>& procIds);  // hide optional param comm
+        virtual ~OverlapDEC();
+        void release();
+
+        void sendRecvData(bool way=true);
+        void sendData();
+        void recvData();
+        void synchronize();
+        void attachSourceLocalField(ParaFIELD *field, bool ownPt=false);
+        void attachTargetLocalField(ParaFIELD *field, bool ownPt=false);
+        void attachSourceLocalField(MEDCouplingFieldDouble *field);
+        void attachTargetLocalField(MEDCouplingFieldDouble *field);
+        void attachSourceLocalField(ICoCo::MEDDoubleField *field);
+        void attachTargetLocalField(ICoCo::MEDDoubleField *field);
+        ProcessorGroup *getGroup();
+        bool isInGroup() const;
+
+        void setDefaultValue(double val);
+        void setWorkSharingAlgo(int method);
+
+        void debugPrintWorkSharing(std::ostream & ostr) const;
+
+        %extend {
+          OverlapDEC(const std::set<int>& ids, long long comm_ptr)
+          {
+             return new OverlapDEC(ids, *((MPI_Comm*)comm_ptr));
+          }
+
+          // This one should really not be called directly by the user since it still has an interface with a pointer to MPI_Comm 
+          // which Swig doesn't handle nicely.
+          // It is just here to provide a constructor taking a **pointer** to a comm - See pythoncode below.
+          static OverlapDEC* _NewWithComm_internal(const std::set<int>& ids, long long another_comm)
+          {
+            return new OverlapDEC(ids, *(MPI_Comm*)another_comm); // I know, ugly cast ...
+          }
+        }
+   };
+
+} // end namespace MEDCoupling
 
 %extend MEDCoupling::ParaMESH
 {
@@ -324,3 +407,54 @@ if MEDCouplingUse64BitIDs():
 else:
   ParaDataArrayInt = ParaDataArrayInt32
 %}
+
+%pythoncode %{
+
+# And here we use mpi4py ability to provide its internal (C++) pointer to the communicator:
+# NB: doing a proper typemap from MPI_Comm from Python to C++ requires the inclusion of mpi4py headers and .i file ... an extra dependency ...
+def _IKDEC_WithComm_internal(src_procs, tgt_procs, mpicomm=None):
+    from mpi4py import MPI
+    # Check iterable:
+    try:
+        s, t = [el for el in src_procs], [el for el in tgt_procs]
+    except:
+        s, t = None, None
+    msg =  "InterpKernelDEC: invalid type in ctor arguments! Possible signatures are:\n"
+    msg += "   - InterpKernelDEC(ProcessorGroup, ProcessorGroup)\n"
+    msg += "   - InterpKernelDEC(<iterable>, <iterable>)\n"
+    msg += "   - InterpKernelDEC(<iterable>, <iterable>, MPI_Comm*) : WARNING here the address of the communicator should be passed with MPI._addressof(the_com)\n"
+    msg += "   - InterpKernelDEC.New(ProcessorGroup, ProcessorGroup)\n"
+    msg += "   - InterpKernelDEC.New(<iterable>, <iterable>)\n"
+    msg += "   - InterpKernelDEC.New(<iterable>, <iterable>, MPI_Comm)\n"
+    if mpicomm is None:
+        if isinstance(src_procs, ProcessorGroup) and isinstance(tgt_procs, ProcessorGroup):
+            return InterpKernelDEC._NewWithPG_internal(src_procs, tgt_procs)
+        elif not s is None:  # iterable
+            return InterpKernelDEC._NewWithComm_internal(s, t, MPI._addressof(MPI.COMM_WORLD))
+        else:
+            raise InterpKernelException(msg)
+    else:
+        if s is None: raise InterpKernelException(msg)  # must be iterable
+        return InterpKernelDEC._NewWithComm_internal(s, t, MPI._addressof(mpicomm))
+
+def _ODEC_WithComm_internal(procs, mpicomm=None):
+    from mpi4py import MPI
+    # Check iterable:
+    try:
+        g = [el for el in procs]
+    except:
+        msg =  "OverlapDEC: invalid type in ctor arguments! Possible signatures are:\n"
+        msg += "   - OverlapDEC.New(<iterable>)\n"
+        msg += "   - OverlapDEC.New(<iterable>, MPI_Comm)\n"
+        msg += "   - OverlapDEC(<iterable>)\n"
+        msg += "   - OverlapDEC(<iterable>, MPI_Comm*) : WARNING here the address of the communicator should be passed with MPI._addressof(the_com)\n"
+        raise InterpKernelException(msg)
+    if mpicomm is None:
+        return OverlapDEC(g)
+    else:
+        return OverlapDEC._NewWithComm_internal(g, MPI._addressof(mpicomm))
+
+InterpKernelDEC.New = _IKDEC_WithComm_internal
+OverlapDEC.New = _ODEC_WithComm_internal
+
+%}
diff --git a/src/ParaMEDMEM_Swig/test_InterpKernelDEC.py b/src/ParaMEDMEM_Swig/test_InterpKernelDEC.py
index ef68d76a..fe30d14c 100755
--- a/src/ParaMEDMEM_Swig/test_InterpKernelDEC.py
+++ b/src/ParaMEDMEM_Swig/test_InterpKernelDEC.py
@@ -82,6 +82,37 @@ class ParaMEDMEM_IK_DEC_Tests(unittest.TestCase):
         fld.setMesh(sub_m)
         return sub_m, fld
 
+    def testInterpKernelDEC_ctor(self):
+        """ Test the various Python ctors """
+        size = MPI.COMM_WORLD.size
+        if size != 4:
+            print("Should be run on 4 procs!")
+            return
+        # Define two processor groups
+        nproc_source = 2
+        l1, l2 = range(nproc_source), range(size - nproc_source, size)
+        # With 2 iterables:
+        i1 = InterpKernelDEC.New(l1, l2)
+        # Should also work directly:
+        i2 = InterpKernelDEC(l1, l2)
+        # With 2 proc groups:
+        interface = CommInterface()
+        source_group = MPIProcessorGroup(interface, list(l1))
+        target_group = MPIProcessorGroup(interface, list(l2))
+        i3 = InterpKernelDEC.New(source_group, target_group)
+        # Should also work directly:
+        i4 = InterpKernelDEC(source_group, target_group)
+        # With 2 iterables and a custom comm:
+        i5 = InterpKernelDEC.New(l1, l2, MPI.COMM_WORLD)
+        # Work directly with the **hack**
+        i6 = InterpKernelDEC(l1, l2, MPI._addressof(MPI.COMM_WORLD))
+        # Should fail with 2 proc groups **and** a communicator
+        self.assertRaises(InterpKernelException, InterpKernelDEC.New, source_group, target_group, MPI.COMM_WORLD)
+        self.assertRaises(NotImplementedError, InterpKernelDEC, source_group, target_group, MPI.COMM_WORLD)
+        i6.release(); i5.release(); i4.release(); i3.release(); i2.release(); i1.release()
+        source_group.release()
+        target_group.release()
+
     @WriteInTmpDir
     def testInterpKernelDEC_2D_py_1(self):
         """ This test illustrates a basic use of the InterpKernelDEC.
diff --git a/src/ParaMEDMEM_Swig/test_OverlapDEC.py b/src/ParaMEDMEM_Swig/test_OverlapDEC.py
index 48df8f4d..778f40b0 100755
--- a/src/ParaMEDMEM_Swig/test_OverlapDEC.py
+++ b/src/ParaMEDMEM_Swig/test_OverlapDEC.py
@@ -88,6 +88,25 @@ class ParaMEDMEM_O_DEC_Tests(unittest.TestCase):
         fld.setMesh(sub_m)
         return sub_m, fld
 
+    def testOverlapDEC_ctor(self):
+        """ Test the various Python ctors """
+        size = MPI.COMM_WORLD.size
+        if size != 4:
+            print("Should be run on 4 procs!")
+            return
+        # Define processor group
+        proc_group = list(range(size))
+        # With 2 iterables:
+        o1 = OverlapDEC.New(proc_group)
+        # Should also work directly:
+        o2 = OverlapDEC(proc_group)
+        # With an iterable and a custom comm:
+        o3 = OverlapDEC.New(proc_group, MPI.COMM_WORLD)
+        # Also work directly with the **hack** on the comm:
+        o4 = OverlapDEC(proc_group, MPI._addressof(MPI.COMM_WORLD))
+        self.assertRaises(NotImplementedError, OverlapDEC, proc_group, MPI.COMM_WORLD)
+        o4.release(); o3.release(); o2.release(); o1.release()
+
     @WriteInTmpDir
     def testOverlapDEC_2D_py_1(self):
         """ The main method of the test """
