# Hydraulique 2D laminar with Quick scheme #
# PARALLEL RUNS #
# lance_test 2 ecarts #

# Dimension 2D or 3D #
dimension 2

# Domain definition #
Domaine dom

# BEGIN MESH #
/* Read mesh from ICEM */
/* Read_File_Binary dom mesh.bin */
/* Read mesh from Salome */
/* Read_MED dom Mesh_1 mesh.med */
/* Create domain and mesh from TRUST */
Read_file Obstacle.geo ;
# END MESH #

# BEGIN PARTITION
Partition dom
{
    /* Choose Nb_parts so to have ~ 25000 cells per processor */
    Partition_tool metis { nb_parts 2 }
    Larg_joint 2
    zones_name DOM
}
End
END PARTITION #

# BEGIN SCATTER
Scatter DOM.Zones dom
END SCATTER #

# Discretization on hexa or tetra mesh #
VDF ma_discretisation

# Time scheme explicit or implicit #
Scheme_euler_explicit mon_schema
Read mon_schema
{
    # Time step #
    # Initial time [s] #
    tinit 0
	nb_pas_dt_max 3
    # Min time step #
    dt_min 5.e-3
    # Max time step #
    dt_max 5.e-3 # dt_min=dt_max so dt imposed #
    # facsec such as dt = facsec * min(dt(CFL),dt_max) ; for explicit scheme facsec <= 1. By default facsec equals to 1 #
    # facsec 0.5 #
    # make the diffusion term in NS equation implicit : disable(0) or enable(1) #
    diffusion_implicite 0

    # Output criteria #
    # .out files printing period #
    dt_impr 5.e-3 # Note: small value to print at each time step #
    # .sauv files printing period #
    dt_sauv 100
    periode_sauvegarde_securite_en_heures 23

    # Stop if one of the following criteria is checked: #
    # End time [s] #
    tmax 5.0
    # Max number of time steps #
    # Convergence threshold (see .dt_ev file) #
    seuil_statio 1.e-8
}

# Problem definition #
Pb_hydraulique pb

# Physical characteristcs of medium #
Fluide_Incompressible milieu
Read milieu
{
    # hydraulic problem #
    # Dynamic viscosity [kg/m/s] #
    mu Champ_Uniforme 1 3.7e-05
    # Volumic mass [kg/m3] #
    rho Champ_Uniforme 1 2
}

# Association between the different objects #
Associate pb dom
Associate pb mon_schema
Associate pb milieu
Discretize pb ma_discretisation

# New domains for post-treatment #
# By default each boundarie condition of the domain is already extrated with such name "dom"_boundaries_"BC" #

# Problem description #
Read pb
{
    # hydraulic problem #
    Navier_Stokes_standard
    {
        # Pressure matrix solved with #
        solveur_pression GCP {
            precond ssor { omega 1.500000 }
            seuil 1.000000e-06
            impr
        }
        # Two operators are defined #
        convection { quick }
        diffusion { }

        # Uniform initial condition for velocity #
        initial_conditions {
            vitesse Champ_Uniforme 2 0. 0.
        }
        # Boundary conditions #
        boundary_conditions {
            Square 	paroi_fixe
            Upper  	symetrie
            Lower 	symetrie
            Outlet 	frontiere_ouverte_pression_imposee Champ_front_Uniforme 1 0.
            Inlet 	frontiere_ouverte_vitesse_imposee Champ_front_Uniforme 2 1. 0.
        }
    }

    # Post_processing description #
    /* To know domains that can be treated directly, search in .err output file: "Creating a surface domain named" */
    /* To know fields  that can be treated directly, search in .err output file: "Reading of fields to be postprocessed" */
    Post_processing
    {
        # Fields #
        format Lata # Lata (upper case !!) to force non regression (it is IMPORTANT) #
        fields dt_post 1.  # Note: Warning to memory space if dt_post too small #
        {
            pression elem
            pression som
            vitesse elem
            vitesse som
        }
    }
}

# The problem is solved with #
Solve pb
# Not necessary keyword to finish #
End
