#!/bin/bash

cree_syno()
{
    # On cherche les synonymes dans la hierarchie
    rm -f existepas.data # Le fichier ne doit pas exister pour la generation du hierarchie.dump
    TRUST_USE_XDATA=1 $1 existepas 1>/dev/null 2>&1
    if [ -f hierarchie.dump ]
    then
       listsyno=`grep "<=>" hierarchie.dump| sed "s/ <=> /%/"`
       rm -f *dump existepas.log $TRUST_TMP/syno.py
       echo -n "synonyme={ 'fin':'end'," > $TRUST_TMP/syno.py
       for syn in $listsyno
       do
          #syn2=`echo $syn|awk '{print $2}' `
          mottrio=`echo $syn | awk -F\% '{print tolower($2) }'`
          new=`echo $syn | awk -F\% '{print tolower($1)}'`	
          #echo -n \"$new"\":\""$mottrio"\"",
          echo -n \"$mottrio"\":\""$new"\"", >> $TRUST_TMP/syno.py
       done
       echo "}" >> $TRUST_TMP/syno.py
       rm -f existepas.stop
    else
       echo "Pas de fichier hierarchie.dump genere !"
    fi
}
exec=$* && [ -f $exec ] && [ -f syno.py ] && [ syno.py -nt $exec ] && exit 0
# Tentative de creation de syno.py
# ToDo: on ne cree pas les synonymes sur les clusters, oblige a lancer un calcul en soumission:
cree_syno $exec
if [ -f $TRUST_TMP/syno.py ] 
then
   # Mise a jour eventuelle de syno.py
   diff $TRUST_TMP/syno.py syno.py 1>/dev/null 2>&1 || cat $TRUST_TMP/syno.py > syno.py
   rm -f $TRUST_TMP/syno.py
fi
exit 0

