#!/bin/bash
# This shell script is used to generate some source files automatically
#  from a template file. See for example Sortie.cpp and Entree.cpp
# Usage
#  process_generated_source.sh template_file destination_file
#
# Special directives are
#  define the beginning of the bloc to generate
#     /* ******* MAKE-SOURCE ********* */
#  tell to include the "pattern" at this point
#     /* PASTE */
#  tell to NOT expand the directive on this line, paste it as is in the destination file
#     /* NO_PROCESS */
#  define the beginning of the "pattern"
#     /* ******* PATTERN *********** */
#  define the end of the "pattern"
#     /* ******* END-PATTERN ********* */

TEMPLATE=$1
DESTFILE=`echo $TEMPLATE | awk -F. '{print $1"_generated."$2}'`
TMP_DESTFILE=tmp_$DESTFILE
echo "
//
// WARNING: DO NOT EDIT THIS FILE! Only edit the template file $TEMPLATE
//" > $TMP_DESTFILE

# We will preprocess the template source to expand macros, but we do not
# want to expand include directives, so replace include with a fake instruction:
# We also don't want to process directives marked by /* NO_PROCESS */
sed 's/#include/LIUUYAZBXOIJ/g;s/#\(.*\) \/\* NO_PROCESS \*\//JKXLSLKQJONIU\1/' $TEMPLATE >tmpfile0
# We extract the bloc enclosed within
#  /* ******* PATTERN ********* */
#    template instructions
#  /* ******* END-PATTERN ********* */
# and we store it in a temporary file:
awk '/\/\* \** END-PATTERN \** \*\// {flag=0};flag==1{print};/\/\* \** PATTERN \** \*\//{flag=1}' tmpfile0 > tmpfile
#  We process the bloc enclosed within
#  /* ******* MAKE-SOURCE ********* */
#    instructions
#  /* ******* PATTERN *********** */
#  And we paste this block in the destination file. Moreover, each time we find the /* PASTE */ commentary,
#  we replace it by the template instructions. Then the destination file is parsed by the c++ preprocessor.
awk '/\/\* \** PATTERN \** \*\// {flag=0};/\/\* PASTE \*\//{$0="#include \"tmpfile\""};flag==1{print};/\/\* \** MAKE-SOURCE \** \*\//{flag=1}' tmpfile0 > tmp_file.cpp
g++ -P -C -E tmp_file.cpp -o tmpfile0
# restore include directives in the destination file.
sed 's/LIUUYAZBXOIJ/#include/g;s/JKXLSLKQJONIU/#/' tmpfile0 >>$TMP_DESTFILE

# We process some others bloc
LABEL=`basename $DESTFILE .cpp`
LABEL=`basename $DESTFILE .h`
[ "`grep IFNDEF $TMP_DESTFILE`" != "" ] && echo $ECHO_OPTS "1,$ s?\/\* IFNDEF \*\/?#ifndef $LABEL?g\nw" | ed $TMP_DESTFILE 1>/dev/null 2>&1
[ "`grep DEFINE $TMP_DESTFILE`" != "" ] && echo $ECHO_OPTS "1,$ s?\/\* DEFINE \*\/?#define $LABEL?g\nw" | ed $TMP_DESTFILE 1>/dev/null 2>&1
[ "`grep ENDIF  $TMP_DESTFILE`" != "" ] && echo $ECHO_OPTS "1,$ s?\/\* ENDIF \*\/?#endif?g\nw" 		| ed $TMP_DESTFILE 1>/dev/null 2>&1


rm -f tmpfile tmpfile0
rm -f tmp_file.cpp

# remove header from destination file to compare
TMP=tmp
$TRUST_Awk 'FNR>7' $DESTFILE > $TMP
if [ "`diff $TMP_DESTFILE $TMP`" ]
then
   CHECKOUT $DESTFILE 1>/dev/null 2>&1
   mv -f $TMP_DESTFILE $DESTFILE
   echo "$DESTFILE has been updated."
else
   rm -f $TMP_DESTFILE
fi
rm -f $TMP
