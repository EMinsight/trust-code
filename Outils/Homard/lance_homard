#!/bin/bash
# ==============================================
#
# script de lancement de HOMARD version 8.9
# (janvier 2008)
#
# (A integrer eventuellement : 
#  option : entree du nom du fichier .hom si different du nom automatique
#  option : afficher les champs dispo
#  nouvelles fonctions de MED
# "CCChaTou oui" permet de raffiner ts les champs sur ts les pas de temps.)
#
#
# Rq pour les options -tps et -majall les variables d environnement
# HDF5HOME et MEDHOME doivent etre positionnees
# ex :  MEDHOME=$HOME/med-2.3.1/arch/Linux
# ex :  HDF5HOME=$HOME/hdf5-1.6.4/arch/Linux
# ==============================================

triou=triou
neptune=neptune

# Variable pour choix du code (conditionne les valeurs par defaut du script et son comportement)
#code=$triou
code=$neptune

if [ "$TRUST_ROOT" != "" ]
then
  code=$triou
  HDF5HOME=$TRUST_MED_ROOT
  MEDHOME=$HDF5HOME
fi

doc()
        {
	echo ""
        echo "DESCRIPTION :"
	echo ""
        echo "   Ce script genere le fichier de configuration de HOMARD et lance HOMARD sur le maillage indique"
	echo "   Le nouveau maillage est nom_ancien_maillage_raff.med"
        echo "   (Attention, ce script supprime le precedent nom_ancien_maillage_raff.med)"
        echo ""
        echo "USAGE :"
        echo ""
	if [ $code == $triou ] ; then
	    echo " --> soit par defaut : lance_homard nom_fic_med nom_dom nom_champ seuil "
	else
	    echo " --> soit par defaut : lance_homard nom_fic_med nom_champ seuil "
	fi
	echo " "
	echo "    avec :"
	echo "     nom_fic_med : nom du fichier MED contenant le domaine et le champ indicateur de raffinement"
	if [ $code == $triou ] ; then
	    echo "     nom_dom     : nom du domaine dans le fichier MED"
	fi
	echo "     nom_champ   : nom du champ indicateur dans le fichier MED"
	echo "     seuil       : seuil delimitant les elements a raffiner "
	echo ""
	echo " --> soit avec indications et options : "
	echo "     -h                   : affichage de l'aide"
	echo "     -fichier nom_fic_med : indication du fichier med"
	echo "     -dom nom_dom         : indication du nom de domaine"
	echo "     -crit nom_champ      : indication du champ indicateur de raffinement (critere)"
	echo "     -seuil seuil         : indication du seuil"
	echo "     -type_seuil type     : indication du type de seuil (0 pour un seuil absolu ou 1 pour un pourcentage)"
	echo "     -niter numiter       : indication du numero d'adaptation du maillage d'entree (0 par defaut)"
	echo "     -majcrit             : met a jour le champ critere sur le nouveau maillage"
	echo "     -majall              : met a jour tous les champs sur le nouveau maillage"
	echo "     -tps                 : fait afficher les temps pour faire un choix"
	echo ""
	echo " Rq  -majall necessite le positionnement de la variable HDF5HOME (hdf5-1.6.4)"
	echo "             (ex : HDF5HOME=$HOME/hdf5-1.6.4/arch/Linux) "    
	echo " Rq  -tps    necessite le positionnement de la variable MEDHOME (med-2.3.1)"
	echo "             (ex : MEDHOME=$HOME/med-2.3.1/arch/Linux) " 
	echo ""
	}

lecture_arg()
        {
	nom_fic_med=
	nom_dom=
	nom_champ=
	seuil=
	numiter=0
	majall=0
	majcrit=0
	choixtps=0
	type_seuil=0
	while [ "$1" != "" ] ; do
	    case $1 in
		-h) doc 
		    quitter
		    ;;
		-fichier) shift
		       nom_fic_med=$1
		       if [ ! -z $nom_fic_med ] ; then
			   shift
		       fi 
		       ;;
		-dom)  shift
		       nom_dom=$1
		       if [ ! -z $nom_dom ] ; then
			   shift
		       fi 
		       ;;
		-crit) shift
		       nom_champ=$1
		       if [ ! -z $nom_champ ] ; then
			   shift
		       fi
		       ;;
		-type_seuil) shift
		        type_seuil=$1
		       if [ ! -z $type_seuil ] ; then
			   shift
		       fi
		       ;;
		-seuil) shift
		        seuil=$1
		        if [ ! -z $seuil ] ; then
			    shift
		        fi
		        ;;
		-niter) shift
		        numiter=$1
		        if [ ! -z $numiter ] ; then
			    shift
		        fi
		        ;;
		-majall)
		    majall=1
		    shift
		    ;;
		-majcrit)
		    majcrit=1
		    shift
		    ;; 
		-tps)
		    choixtps=1
		    shift
		    ;;
		-*) 
		    doc
		    erreur "option inconnue : $1"
		    shift
		    ;;		    
		*)
		    if [ -z $nom_fic_med ] ; then
		       nom_fic_med=$1
		    elif [ -z $nom_dom ] && [ $code == $triou ] ; then
		    	nom_dom=$1		    	 
		    elif [ -z $nom_champ ] ; then
		       nom_champ=$1
		    elif [ -z $seuil ] ; then
		       seuil=$1
		    else
			doc
			erreur "argument inconnu : $1"
		    fi
		    shift
		    ;;
	    esac
	done
	}

verif_para()
        {
	if [ -z $homard ] ; then 
	    erreur "Variable d'environnement homard non definie ! ... Taper : source_homard "
	fi
	if [ -z $nom_fic_med ] ; then
	    doc
	    erreur "Nom du fichier a raffiner absent"
	fi
	if [ -z $nom_dom ] && [ $code == $triou ] ; then
	    doc
	    erreur "Nom du domaine absent"
	fi
	if [ -z $nom_dom ] && [ $code == $neptune ] ; then
		nom_dom="Domaine_fluide"
	fi
	if [ -z $nom_champ ] ; then
	    doc
	    erreur "Nom du champ indicateur d'erreur absent"
	fi
	if [ -z $seuil ] ; then
	    doc
	    erreur "Seuil d'erreur absent"
	fi
	if [ -z $numiter ] ; then
	    numiter=0
	fi
	if [ ! -f $nom_fic_med ] ; then
	    erreur "Fichier $nom_fic_med est inconnu"
	fi
	if [ $type_seuil != 0 ] && [ $type_seuil != 1 ] ; then
	    doc
	    erreur "Type_seuil $type_seuil inconnu " 
	fi
	}

nomenclature_nom_fic()
        {
        nom_fic=`basename $nom_fic_med .med`
	nom_fic_base=`basename $nom_fic _raff$numiter`
	(( numiter_raff = numiter + 1))
	ext=_raff$numiter_raff
	nom_fic_raff=$nom_fic_base$ext
	nom_fic_raff_med=$nom_fic_raff.med
	}

get_list_fields()
        {
        i_list_fields=0
	if [ ! -z $HDF5HOME ] ; then
	    listfields=` ${HDF5HOME}/bin/h5ls $nom_fic_med/CHA | awk '{print $1}'`		
	    i_list_fields=1
	else
	    info "Liste des champs non accessible car HDF5HOME n'est pas positionne"
	fi
	}

get_list_fields_raff()
        {
	if [ $i_list_fields = 1 ] ; then
	    iverif=0
	    for field in $listfields ; do
		if [ "$nom_champ" = "$field" ] ; then
		    iverif=1
		fi
	    done
	    if [ $iverif = 0 ] ; then
		erreur "Le champ $nom_champ n'est pas present dans $nom_fic_med"
	    fi
	    if [ $majall = 1 ] ; then
		listchampsmaj=$listfields
	    fi
	else
	    info " Verification non possible de la presence du champ $nom_champ dans $nom_fic_med"
	    if [ $majall = 1 ] ; then
		erreur " Option -majall non disponible car la liste des champs n'est pas accessible"
	    fi		
	fi
	if [ $majcrit = 1 ] ; then
	    listchampsmaj=$nom_champ
	fi
	}

get_list_time()
        {
	nbtps=0
	ipdt=0
	ipdtmax=0
        i_list_time=0
	mdump_input=mdump_input
	echo "1 1 1" > $mdump_input
	if [ ! -z $MEDHOME ] ; then
	    listnit=`$MEDHOME/bin/mdump $nom_fic_med < $mdump_input  | grep 'Pas de Temps' | awk '{print $4}' | sed -e "s/n./ /g"`
	    listtime=`$MEDHOME/bin/mdump $nom_fic_med < $mdump_input  | grep 'Pas de Temps' | awk '{print $5}' | sed -e "s/(/ /g"  | sed -e "s/)/ /g"`
	    i_list_time=1
	    for i in $listnit ; do
		if [ $nbtps = 0 ] ; then
		    ipdtmax=$i
		    (( nbtps = nbtps + 1))
		elif [ $i -gt $ipdtmax ] ; then 
		    (( nbtps = nbtps + 1))
		    ipdtmax=$i
		fi
	    done
	    ipdt=$ipdtmax
	    if [ $choixtps = 1 ] ; then
		echo
		echo "  --> Choisir un numero d'iteration dans la liste suivante :"
		numi=0
		for i in $listnit ; do
		    if [ $numi = 0 ] ; then
			(( numi = numi + 1))
			imax=$i
			numj=0
			for j in $listtime ; do
			    (( numj = numj + 1)) 
			    if [ $numj = $numi ] ; then
				echo "       it  $i   : temps $j "
			    fi
			done
		    elif [ $i -gt $imax ] ; then 
			(( numi = numi + 1))
			imax=$i
			numj=0
			for j in $listtime ; do
			    (( numj = numj + 1)) 
			    if [ $numj = $numi ] ; then
				echo "      it  $i   : temps $j "
			    fi
			done
		    fi
		done
		read ipdt
	    fi
	    
	else
	    info "Liste des temps non accessible car MEDHOME n'est pas positionne"
	    if [ $choixtps = 1 ] ; then
		erreur " Option -tps non disponible car la liste des temps n'est pas accessible"
	    fi
	fi
        }


genere_homard_config()
        {
	echo "">> $fich_config
 	echo "# Fichier de sortie standard ">> $fich_config
 	echo "# -------------------------- ">> $fich_config
	echo "ListeStd $fich_listing">> $fich_config
	echo "">> $fich_config

	echo "# Pilotage general">> $fich_config
 	echo "# -------------------------- ">> $fich_config
	echo "Langue   Francais">> $fich_config
	echo "Action   homa">> $fich_config
	echo "NumeIter $numiter">> $fich_config
	echo "TypeElem tous">> $fich_config
	echo "#SuivFron non">> $fich_config
	echo "TypeBila 10010">> $fich_config
	if [ $code == $triou ] ; then
	    echo "CCAssoci med">> $fich_config
	else
	    echo "CCAssoci neptune">> $fich_config
	fi
	echo "ModeHOMA 1">> $fich_config
	echo "">> $fich_config

	echo "# Instructions specifiques">> $fich_config
 	echo "# -------------------------- ">> $fich_config
	echo "CCNoMN__ $nom_dom " >> $fich_config
	echo "CCNoMNP1 $nom_dom" >> $fich_config
	echo "CCNoChaI $nom_champ  "  >> $fich_config 
	echo "CCCoChaI x "  >> $fich_config 
	
	
	echo "CCNumPTI $ipdt "  >> $fich_config 
	if [ $code == $triou ] ; then
	    echo "CCNumOrI -1 "  >> $fich_config
        else
	    echo "CCNumOrI $ipdt "  >> $fich_config
	fi
	echo "">> $fich_config

	echo "# Directives de raffinement">> $fich_config
 	echo "# -------------------------- ">> $fich_config
	if [ $code == $triou ] ; then
	    echo "TypeRaff libre" >> $fich_config
	else
	    echo "TypeRaff non_conforme_indicateur" >> $fich_config
#	echo "TypeRaff non_conforme_1_noeud" >> $fich_config
	fi

	if [ $type_seuil == 0 ] ; then
		echo "SeuilHau $seuil" >> $fich_config
	else
		echo "SeuilHPE $seuil" >> $fich_config
	fi
	echo "NiveauMa 8" >> $fich_config
	echo "">> $fich_config

	echo "# Directives de deraffinement">> $fich_config
 	echo "# -------------------------- ">> $fich_config
	echo "TypeDera libre" >> $fich_config
	echo "SeuilBas 0." >> $fich_config
	echo "NiveauMi 0" >> $fich_config
	echo "">> $fich_config

	echo "# Champs a mettre a jour">> $fich_config
 	echo "# -------------------------- ">> $fich_config
	ifield=0
	for field in $listchampsmaj ; do
	    (( ifield = ifield + 1))
	    echo "CCChaNom $ifield $field" >> $fich_config
	    if [ $nbtps -gt 1 ] ; then 
		echo "CCChaNu0 $ifield $ipdt" >> $fich_config
		echo "CCChaPdT $ifield $ipdt" >> $fich_config
	    fi
	done
#	echo "CCChaTou oui" >> $fich_config
	echo "">> $fich_config

	echo "# Fichiers HOMARD ">> $fich_config
 	echo "# -------------------------- ">> $fich_config
	echo "HOMaiN__ Mai0$numiter $nom_fic.hom" >> $fich_config
	echo "HOMaiNP1 Mai0$numiter_raff $nom_fic_raff.hom" >> $fich_config
	echo "">> $fich_config

	echo "#  Maillages ">> $fich_config
 	echo "# -------------------------- ">> $fich_config
	echo "CCMaiN__ $nom_fic_med" >> $fich_config
	echo "CCIndica $nom_fic_med" >> $fich_config
	echo "CCSolN__ $nom_fic_med" >> $fich_config
	echo "CCMaiNP1 $nom_fic_raff_med" >> $fich_config
	echo "CCSolNP1 $nom_fic_raff_med"  >> $fich_config
	echo "">> $fich_config
	}

clean_pre()
        {
	rm -f HOMARD.Configuration
	rm -f transf_med.data
	rm -f $nom_fic_raff_med
	rm -f conversion.log error info
	}

clean_post()
        {
	    rm -f apad.* avad.* diam.* indic.* qual.* verif_avad.* mdump_input
	}

genere_trio_data() {
	echo "dimension 3 " >> transf_med.data
	echo "Domaine raff_$nom_dom " >> transf_med.data
	echo "Lire_MED raff_$nom_dom $nom_dom $nom_fic_raff.med " >> transf_med.data
	echo "ecrire_fichier raff_$nom_dom $nom_fic_raff.geom " >> transf_med.data
	echo "Lire_fichier raff_$nom_dom $nom_fic_raff.geom " >> transf_med.data
	echo "postraiter_domaine { domaine  raff_$nom_dom format lata fichier $nom_fic_raff.lata } " >> transf_med.data
}

run_homard() 
	{
	echo ""
	echo "______ Lancement de l'execution de HOMARD "
	$homard || erreur " Erreur a l'execution de HOMARD "
	echo "______ Execution terminee "
       	echo
	}


info_para() 
	{
	echo ""
	echo "______ Parametres" ; echo
	echo "       Nom du fichier MED                 : " $nom_fic_med
	echo "       Nom du domaine                     : " $nom_dom
	echo "       Nom du champ indicateur            : " $nom_champ
	echo "       Seuil pour les elements a raffiner : " $seuil
#	echo "       Pourcentage d elements a raffiner  : " $seuil
	echo
	echo "       Nom du nouveau fichier MED         : " $nom_fic_raff_med
	echo "       Fichiers de configuration          : " $fich_config
	echo "       Fichiers de compte-rendu           :  $fich_listing  conversion.log "
	}

log() 
	{
	echo "______ Maillage AVANT conversion : $nom_fic_med" ; echo
	grep -A 16 "Caracteristiques du maillage dans le fichier"  $fich_listing > info.maillage
	grep -A 14 "Nom du maillage"  info.maillage
	echo
	echo "______ Maillage APRES conversion : $nom_fic_raff_med" ; echo
	grep -A 12 "Caracteristiques du maillage apres conversion" $fich_listing > info.maillage
	grep -A 10 "Nombre de noeuds"  info.maillage
	rm info.maillage
	}

info()
        {
	echo " INFO  " $1 >> $INFO
        } 

erreur()
        {
	echo " ERREUR" $1 >> $ERROR
	quitter
        } 

quitter()
        {
	if [ -f $INFO ] ; then
	    echo ""
	    cat $INFO
	fi
	if [ -f $ERROR ] ; then 
	    echo ""
	    cat $ERROR
	    echo ""
	fi
	exit -1
        }

# ==============================================

# -- intialisation
DIR=`dirname $0`
ERROR=error
INFO=info
fich_config=HOMARD.Configuration      # ne pas changer de nom
fich_listing=HOMARD.listing
clean_pre

# -- lecture arguments et verification des parametres
lecture_arg $*
verif_para

# -- nom du nouveau maillage
nomenclature_nom_fic
if [ -f $nom_fic_raff_med ] ; then
    rm $nom_fic_raff_med
fi

# -- info parametres
info_para
info_para > conversion.log

# -- preparation et creation du fichier de configuration pour HOMARD
get_list_fields
get_list_fields_raff
get_list_time
genere_homard_config

# -- creation du fichier pout TrioU
if [ $code == $triou ] ; then
  genere_trio_data;
fi

# -- execution HOMARD
run_homard

# -- compte-rendu et nettoyage
if [ ! -f $ERROR ] ; then 
    log;
    log > conversion.log
    clean_post
else
    quitter
fi

# ==============================================
