#!/bin/bash
#
# This script produces the .tgz file containing all the data produced by the computations required
# in a PRM. The idea is to be able to reproduce the final PDF file with the old computation results
# but the set of tools of the new version of TRUST.
# This relies on the file build/used_files generated along the way by genererCourbe.py
#

echo "usage $0 src/file.prm [archive_name]"

# cd to the real directory in case of link
cd `pwd -P`
prm=$1
log_file=archive.log

#
# Prepare preserve dir and check computation has run:
#
rm -rf preserve archive.log
mkdir preserve
DIR=`dirname $0`
DIR=`(cd $DIR; pwd)`
$DIR/Run $prm -not_run  -o test.pdf 1>$log_file 2>&1
[ ! -f build/test.pdf ] && echo "Unable to generate report. Exiting. Launch 'Run_fiche' before 'Run_fiche -archive'." && exit 1
rm -rf build/test.pdf

##
## Main
##
echo "ARCHIVE: Copying necessary files ..."
cp build/version_utilisee build/temps_total build/used_files preserve
cp -r src/* preserve
cp build/$1 preserve   # In F5 for example, the PRM itself is generated from a Python script ...
chmod -R +w preserve
cd build 
for f in `cat used_files`; do
   ls $f 1>/dev/null 2>&1
   if [ ! $? -eq 0 ]; then continue; fi
   for f2 in `ls $f`; do
       d=$(dirname $f2);
       mkdir -p ../preserve/$d
       cp $f2 ../preserve/$f2
   done
done
cd ..

# Compressing
archive=preserve
[ "$2" != "" ] && archive=$2
echo "ARCHIVE: Creating archive:" $archive
tar zcf $archive.tgz preserve
rm -rf preserve all.tar

#
# Last check from generated tgz
#
echo "ARCHIVE: Testing archive ..."
tar zxf $archive.tgz
cd preserve

python $DIR/src/genererCourbes.py -p $prm --no_prereq -o ../old_rapport.pdf 1> ../$log_file 2>&1
[ $? -ne 0 ] && echo "*** FAILED generating archive!! Last logs of (failed) report build can be seen in $log_file" &&  mv ../$archive.tgz ../${archive}_FAILED.tgz && exit 2
cd ..
gzip -f old_rapport.pdf
rm -rf preserve 

echo "ARCHIVE: All done! Last logs of (successful) report build can be seen in $log_file"

