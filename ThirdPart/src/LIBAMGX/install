#!/bin/bash
# AmgX		: See https://github.com/NVIDIA/AMGX#building
# AmgXwrapper	: See https://github.com/barbagroup/AmgXWrapper/blob/master/doc/install.md
AMGX_DIR=`dirname $1`
LIB=`basename $1`
ROOT=`pwd`
   # cmake ne trouve pas toujours les include de CUDA...
   for CUDA_INC_PATH in $CUDA_ROOT/include $CUDA_ROOT/include/cuda
   do
      [ -f $CUDA_INC_PATH/cuda.h ] && export CUDA_INC_PATH && break
   done
log=$ROOT/perf_$LIB.log && rm -f $log
rm -r -f $LIB
if [ $LIB = AmgX ]
then
   # Build
   cd $ROOT
   if [ "`nvcc --version | grep 10.[12]`" != "" ]
   then
      # Cuda 10.1 ou 10.2
      # Commit d0019e5 (more recent commit)
      tar xfz $TRUST_ROOT/externalpackages/$LIB"_"d0019e5.tar.gz
   elif [ "`nvcc --version | grep 10.0`" != "" ]
   then
      # Cuda 10.0
      # Commit ba9132119f (supporte par AmgXWrapper)
      tar xfz $TRUST_ROOT/externalpackages/$LIB"_"ba9132119f.tar.gz
   elif [ "$TRUST_WITHOUT_HOST" = 1 ]
   then
      # Latest:
      git clone https://github.com/NVIDIA/AMGX.git $LIB
   else
      echo "Update $0 for your needs." && exit -1
   fi
   cd $LIB && mkdir -p build && cd build
   cmake -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB -DCMAKE_CXX_COMPILER=$TRUST_CC -DCMAKE_C_COMPILER=$TRUST_cc .. && $TRUST_MAKE && make install && cp -f ../examples/matrix.mtx $AMGX_DIR/$LIB/lib/examples
   [ $? != 0 ] && exit -1
   # Test
   cd $AMGX_DIR/$LIB/lib/examples
   export LD_LIBRARY_PATH=$AMGX_DIR/$LIB/lib:$LD_LIBRARY_PATH
   # Test valgrind:
   [ "$TRUST_WITHOUT_HOST" = 1 ] && valgrind ./amgx_capi -m matrix.mtx -c ../configs/core/FGMRES_AGGREGATION.json 2>&1 | tee -a $log
   exec=./amgx_capi     trust -gpu dummy   -m matrix.mtx -c ../configs/core/FGMRES_AGGREGATION.json 2>&1 | tee -a $log
   exec=./amgx_mpi_capi trust -gpu dummy 2 -m matrix.mtx -c ../configs/core/FGMRES_AGGREGATION.json 2>&1 | tee -a $log
   # solve: 	amgx_capi  	amgx_mpi_capi
   # P600 	0.1120s		bizarre
   # P2000      0.0010s		0.0256s
   # V100 	0.0011s		0.0153s
   # Site AmgX	0.0006s		0.0156s
   cd $ROOT && rm -r -f $LIB # On efface les sources ?	 
fi
if [ $LIB = AmgXWrapper ]
then
   cd $ROOT
   tar xfz $TRUST_ROOT/externalpackages/$LIB"_"*.tar.gz
   # Hack pour empecher le test des binaires qui ne marche pas cluster (un binaire PETSc compile avec CUDA plantera sur la frontale non gpu)
   sed -i "1,$ s?endif (\${\${runs}})??" AmgXWrapper/cmake-modules/FindPETSc.cmake
   sed -i "1,$ s?if (\${\${runs}})??"    AmgXWrapper/cmake-modules/FindPETSc.cmake
   cd $LIB && rm -r -f build && mkdir -p build && cd build
   BUILD=RELEASE
   #BUILD=DEBUG
   cmake -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB -DCMAKE_BUILD_TYPE=$BUILD -DCUDA_DIR=$CUDA_ROOT -DAMGX_DIR=$AMGX_DIR/AmgX .. && $TRUST_MAKE
   [ $? != 0 ] && exit -1
   make install # Erreur sur la doc on ne fait pas de exit
   # Creation d'une librairie statique en plus de la dynamique libAmgXWrapper.so
   ar cru $AMGX_DIR/$LIB/lib64/libAmgXWrapper_static.a CMakeFiles/AmgXWrapper.dir/src/*.o
   # Test
   cd $AMGX_DIR/$LIB
   rm -r -f example && mkdir -p example && cd example
   tests="poisson solveFromFiles"
   for test in $tests
   do
      sed -i "1,$ s?# include <petsctime.h>??g" $ROOT/AmgXWrapper/example/$test/src/solve.cpp || exit -1
      mkdir -p $test && cd $test && cp $ROOT/AmgXWrapper/example/$test/README.md . && cmake -DCUDA_DIR=$CUDA_ROOT -DAMGX_DIR=$AMGX_DIR/AmgX $ROOT/AmgXWrapper/example/$test && $TRUST_MAKE && cd .. || exit -1
   done
   cd $AMGX_DIR/$LIB/example/poisson
   # Test valgrind:
   [ "$TRUST_WITHOUT_HOST" = 1 ] && valgrind bin/poisson -caseName valgrind -mode AmgX_GPU -cfgFileName configs/AmgX_SolverOptions_Classical.info -Nx 2 -Ny 2 -Nz 2 2>&1 | tee -a
   exec=bin/poisson trust -gpu dummy 4 -caseName PETSc_GAMG_100x100x100 -mode PETSc    -cfgFileName configs/PETSc_SolverOptions_GAMG.info     -Nx 100 -Ny 100 -Nz 100 2>&1 | tee -a $log
   exec=bin/poisson trust -gpu dummy 4 -caseName   AmgX_AGG_100x100x100 -mode AmgX_GPU -cfgFileName configs/AmgX_SolverOptions_Classical.info -Nx 100 -Ny 100 -Nz 100 2>&1 | tee -a $log
$log
   # ---------------------------------------------------------------------------	  
   # Machine	NVidia		GFlops	Cuda	Driver	GNU	MPI	solve	GAMG	AmgX_AGG	 
   # is234639	P600 		 1.1	10.0	10.2	7.4.0	OpenMPI 4.0.3	1.83s	0.67s
   # is225303 	K4000 		 1.2   	 8.0 	 9.0	5.4.0	MPICH 3.2	2.08s	crash Cuda failure: 'invalid device function' dense_lu_solver.cu:698
   # is240831	P2000		 3.0	10.1	10.1	7.5.0	MPICH 3.2	1.72s   0.30s
   # irene	P100-PCIE-12Gb	10.6	10.2	10.2	7.3.0	OpenMPI 2.0.4	1.16s	0.11s
   # cobalt	P100-PCIE-16Gb	14.1	10.2	10.2	7.3.0	OpenMPI 2.0.4	1.35s	0.08s
   # cobalt     V100 ?		14.0	10.2	10.2	7.3.0	OpenMPI 2.0.4	?	?
   # orcus	V100-PCIE-16Gb 	14.0	 9.2 	10.1	6.5.0			1.32s	0.07s
   #cd $ROOT && rm -r -f $LIB # On efface les sources ?	    
fi
exit 0
