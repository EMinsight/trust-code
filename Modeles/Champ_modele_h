//////////////////////////////////////////////////////////////////////////////
//
// File:	NOM_DU_FICHIER.h
// Directory:	$TRUST_ROOT/NOM_DU_MODULE
//
// .NOM NOM_DE_LA_CLASSE : 
// .ENTETE TRUST NOM_DU_MODULE
// .LIBRAIRIE NOM_DE_LA_LIBRAIRIE
// .FILE NOM_DU_FICHIER.h
// .FILE NOM_DU_FICHIER.cpp
// .DESCRIPTION  class NOM_DE_LA_CLASSE
//
// Decrire ici la classe NOM_DE_LA_CLASSE
//
//////////////////////////////////////////////////////////////////////////////

#ifndef NOM_DU_FICHIER_inclus
#define NOM_DU_FICHIER_inclus

#include <Ch_Don_base.h>
#include <Motcle.h>

//////////////////////////////////////////////////////////////////////////////
//
// CLASS: NOM_DE_LA_CLASSE 
//
//////////////////////////////////////////////////////////////////////////////

class NOM_DE_LA_CLASSE : public Champ_Don_base
{
   declare_instanciable_sans_constructeur(NOM_DE_LA_CLASSE)
public :
   NOM_DE_LA_CLASSE();
   Champ_base& affecter(const Champ_base& ch);
   DoubleVect& valeur_a(const DoubleVect& position, 
			DoubleVect& valeurs) const;
   DoubleVect& valeur_a_elem(const DoubleVect& position, 
			DoubleVect& valeurs, 
			int poly) const ;
   double valeur_a_elem_compo(const DoubleVect& position, 
			int le_poly,int ncomp) const;
   
   DoubleTab& valeur_aux(const DoubleTab& positions, 
			 DoubleTab& valeurs) const;
   DoubleVect& valeur_aux_compo(const DoubleTab& positions, 
			  DoubleVect& valeurs, int ncomp) const;
   
   DoubleTab& valeur_aux_elems(const DoubleTab& positions,
			 const IntVect& les_polys,
			 DoubleTab& valeurs) const ;
   DoubleVect& valeur_aux_elems_compo(const DoubleTab& positions,
			  const IntVect& les_polys,
			  DoubleVect& valeurs, 
			  int ncomp) const;
protected :
   //
   // AJOUTER ICI LES PARAMETRES EVENTUELS
   // Exemple : fx=a*x*x + b ; fy=a*y*y + b; fz=a*z*z + b
   // double a;
   // double b;
   inline double fx(double x) const;
   inline double fx(double x, double y) const;
   inline double fy(double x, double y) const;
   inline double fx(double x, double y, double z) const;
   inline double fy(double x, double y, double z) const;
   inline double fz(double x, double y, double z) const;
};

//
// Methodes inline :
//

// Description:
//
// NOMBRE_DE_COMPOSANTES
inline double NOM_DE_LA_CLASSE::fx(double x) const
{
   // A CODER return f(x) si NOM_DE_LA_CLASSE a un sens en 1D;
   return 0;
}

// Description:
//
inline double NOM_DE_LA_CLASSE::fx(double x, double y) const
{
   // A CODER return f(x, y) si NOM_DE_LA_CLASSE a un sens en 2D;
   return 0;
}

// Description:
//
inline double NOM_DE_LA_CLASSE::fy(double x, double y) const
{
   // A CODER return f(x, y) si NOM_DE_LA_CLASSE a un sens en 2D;
   return 0;
}

// Description:
//
inline double NOM_DE_LA_CLASSE::fx(double x, double y, double z) const
{
   // A CODER return f(x, y, z) si NOM_DE_LA_CLASSE a un sens en 3D;
   return 0;
}

// Description:
//
inline double NOM_DE_LA_CLASSE::fy(double x, double y, double z) const
{
   // A CODER return f(x, y, z) si NOM_DE_LA_CLASSE a un sens en 3D;
   return 0;
}

// Description:
//
inline double NOM_DE_LA_CLASSE::fz(double x, double y, double z) const
{
   // A CODER return f(x, y, z) si NOM_DE_LA_CLASSE a un sens en 3D;
   return 0;
}

#endif
