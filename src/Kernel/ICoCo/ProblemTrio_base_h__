#Pmacro declarePb(__typeTrio__,__type__)
#ifndef __typeTrio___included
#define __typeTrio___included

#include <__type__.h>
#include <vector>
#include <string>

class mon_main;
class Objet_U;

class Probleme_U;
//using std::string;
//using std::vector;

#Pif("__type__"=="Problem")
#undef OLD_MEDCOUPLING

#ifdef OLD_MEDCOUPLING
namespace ParaMEDMEM
{
class MEDCouplingFieldDouble;
}
#endif
#Pendif
namespace ICoCo
{

class TrioField;
class MEDField;
class Init_Params;

//////////////////////////////////////////////////////////////////////////////
//
// .DESCRIPTION
//     class __typeTrio__
//
//     This class defines the API a problem has to implement in order to be coupled.
//     For precise specifications and possible use of this API, See NT
//     SSTH/LMDL_2006_001
//     Implements IterativeUnsteady__type__ and FieldIO
//
// .SECTION voir aussi
//////////////////////////////////////////////////////////////////////////////
class __typeTrio__ : public __type__
{

public :
  // interface specifique
  bool initialize_pb(Probleme_U& pb);

  // interface __type__
  __typeTrio__();
  virtual void setDataFile(const std::string& datafile);
  virtual void setMPIComm(void*);


  virtual ~__typeTrio__()  ;
  virtual bool initialize();

  virtual void terminate();

  // interface Unsteady__type__

  virtual double presentTime() const;
  virtual double computeTimeStep(bool& stop) const;
  virtual bool initTimeStep(double dt);
  virtual bool solveTimeStep();
  virtual void validateTimeStep();
  virtual bool isStationary() const;
  virtual void abortTimeStep();

  // interface IterativeUnsteady__type__

  virtual bool iterateTimeStep(bool& converged);

  // interface FieldIO

  virtual std::vector<std::string> getInputFieldsNames() const;
  virtual void getInputFieldTemplate(const std::string& name, TrioField& afield) const;
  virtual void setInputField(const std::string& name, const TrioField& afield);
  virtual std::vector<std::string> getOutputFieldsNames() const;
  virtual void getOutputField(const std::string& name, TrioField& afield) const;

#Pif("__type__"=="Problem")
#ifdef OLD_MEDCOUPLING
  // interface salome
  ParaMEDMEM::MEDCouplingFieldDouble* getOutputMEDField(const std::string& name) const ;
  ParaMEDMEM::MEDCouplingFieldDouble* getInputMEDFieldTemplate(const std::string& name) const;
  void setInputMEDField(const std::string& name, const ParaMEDMEM::MEDCouplingFieldDouble* afield);
#endif
#Pendif
  void getInputFieldTemplate(const std::string& name, MEDField& afield) const;
  void setInputField(const std::string& name, const MEDField& afield);
  void getOutputField(const std::string& name, MEDField& afield) const;


protected :

  Init_Params* my_params;
  Probleme_U* pb;
  mon_main* p;

};
} // namespace ICoCo
Objet_U& get_obj(const char *) ;
#endif
#Pendmacro(declarePb)
