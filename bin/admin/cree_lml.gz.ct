#!/bin/bash
# Script pour mettre a jour les references .lml.gz de cas tests
# ou pour creer sous $TRUST_TESTS/Reference un nouveau cas test
create()
{
   ###########################
   # Verifie le jeu de donnees
   ###########################
   cas=$cass
   if [ "`grep '# PARALLEL OK' $cas.data`" = "" ] && [ "`grep '# PARALLEL RUNS #' $cas.data`" = "" ] && [ "`grep '# PARALLEL STOPS #' $cas.data`" = "" ] && [ "`grep '# PARALLEL BLOCKS #' $cas.data`" = "" ] &&  [ "`grep '# PARALLEL NOT #' $cas.data`" = "" ]
   then
      mes=" Balise pour etat parallele non trouvee ou mal formulee pour le cas" $cas "!"
      erreur
   fi	      
   if [ "`grep '# PARALLEL NOT #' $cas.data`" = "" ]
   then
   if [ "`grep '# BEGIN MESH #' $cas.data`" = "" ] || [ "`grep '# END MESH #' $cas.data`" = "" ]
   then
      mes=" Balise pour maillage non trouvee ou mal formulee pour le cas" $cas "!"
      erreur
   fi
   if [ "`grep '# BEGIN PARTITION' $cas.data`" = "" ] || [ "`grep 'END PARTITION #' $cas.data`" = "" ]
   then
      mes=" Balise pour decoupage non trouvee ou mal formulee pour le cas" $cas "!"
      erreur
   fi
   if [ "`grep '# BEGIN READ' $cas.data`" = "" ] || [ "`grep 'END READ #' $cas.data`" = "" ]
   then
      mes=" Balise pour lecture non trouvee ou mal formulee pour le cas" $cas "!"
      erreur		
   fi
   fi
   ##########################################
   # Verifie si le cas test n'existe pas deja
   ##########################################
   rep=$TRUST_TESTS/Reference/$cas
   [ -d $rep ] && echo "Repertoire $rep deja existant. Changer de nom." && exit
   ###################################################
   # On cree ce qu'il faut en gestion de configuration
   ###################################################
   (
   cd $TRUST_TESTS/Reference
   CHECKOUT . 1>/dev/null 2>&1
   mkdir $cas
   echo "Creation d'un repertoire $TRUST_TESTS/Reference/$cas"
   MKELEM $cas 1>/dev/null 2>&1
   )
   ######################################################
   # Copie les donnees et met en gestion de configuration
   # puis lance le calcul
   ######################################################
   cp *data *geo *geom *ssz *msh $rep/. 2>/dev/null  
   cd $rep
   MKELEM * 1>/dev/null 2>&1
   echo "Attendre la creation du .lml...."
   $exec $cas 1>$cas".out" 2>$cas".err"
   [ ! -f $cas".lml" ] && mes="Pas de fichier lml cree. Verifier le calcul sous $rep" && erreur 
   gzip -f $cas".lml"	   
   MKELEM $cas".lml.gz" 1>/dev/null 2>&1
   echo "Reference $cas".lml.gz" creee."
   cd $ici
}

erreur()
{
   echo $mes
   echo "Rien n'est fait..."
   echo "Corrigez avant de retaper la commande."
   cd $ici
   exit
}
update()
{
rm -f $TRUST_TMP/file
for cas in $cass
do
   # Recherche des fichiers lml en cas de mise a jour
   lmls=`find . -name $cas.lml | grep -v erreur | grep -v differ`
   for lml in $lmls 
   do
      if [ "`grep FIN $lml`" != "" ]
      then
         CHECKOUT $TRUST_TESTS/$lml".gz" 1>/dev/null 2>&1
         mv $lml $TRUST_TESTS/$lml 1>/dev/null 2>&1
         gzip -f $TRUST_TESTS/$lml 1>/dev/null 2>&1
	 echo "Reference $lml is updated..."
         [ $rm = 1 ] && rm -r -f `dirname $lml`
      else
         echo "FIN non trouve dans $lml..."
	 echo "On ne met pas a jour la reference .lml.gz".
      fi
   done
done
rm -f $TRUST_TMP/file
}

echo "Usage: `basename $0` liste_de_cas_test_a_mettre_a_jour|cas_test_a_creer"
cass=$*
[ ${#cass} = 0 ] && exit
ici=`pwd`
cd $TRUST_ROOT/bin;. ./Init_TRUST 1>/dev/null 2>&1
cd $ici
if [ "$TRUST_LOGIN" != "`whoami`" ]
then
  echo "Contacter l'administrateur TRUST pour creer ou modifier la reference du cas test."
  exit
fi  
if [ "`echo $ici | grep $TRUST_ROOT/exec/tests_TRUST$COMM$OPT`" != "" ] && [ -d $TRUST_ROOT/exec/tests_TRUST$COMM$OPT ]
then
   # Mise a jour depuis $TRUST_ROOT/exec/tests_TRUST$COMM$OPT
   cd $TRUST_ROOT/exec/tests_TRUST$COMM$OPT
   rm=1
   update
elif [ "`echo $ici | grep $TRUST_ROOT/exec/tests_TRUST$COMM"_semi"$OPT`" != "" ] && [ -d $TRUST_ROOT/exec/tests_TRUST$COMM"_semi"$OPT ]
then
   cd $TRUST_ROOT/exec/tests_TRUST$COMM"_semi"$OPT
   rm=1   
   update
elif [ "`echo $ici | grep $TRUST_ROOT/exec/tests_TRUST$COMM`" != "" ] && [ -d $TRUST_ROOT/exec/tests_TRUST$COMM ]
then
   cd $TRUST_ROOT/exec/tests_TRUST$COMM
   rm=1   
   update
elif [ "`echo $ici | grep $TRUST_TMP/tests`" != "" ] && [ -d $TRUST_TMP/tests ]
then
   # Mise a jour depuis $TRUST_TMP/tests
   cd $TRUST_TMP/tests
   rm=1
   update
elif [ "`echo $ici | grep $TRUST_TESTS`" != "" ]
then
   # Mise a jour depuis $TRUST_TESTS
   cd $TRUST_TESTS
   rm=0
   update
else
   if [ ! -f ${cass%.data}.data ]
   then
      echo "Placez vous pour taper cette commande sous l'un des repertoires suivants:"
      echo "$TRUST_ROOT/exec/tests_TRUST$COMM$OPT"
      echo "$TRUST_ROOT/exec/tests_TRUST$COMM"_semi"$OPT"
      echo "$TRUST_ROOT/exec/tests_TRUST$COMM"
      echo "$TRUST_TESTS"
      exit
   else
      # Nouveau cas test a archiver
      [ ${#2} != 0 ] && echo "On ne peut creer qu'un seul cas test a la fois." && exit
      cass=${cass%.data}
      create
   fi
fi
