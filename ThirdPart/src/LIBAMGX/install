#!/bin/bash
# AmgX		: See https://github.com/NVIDIA/AMGX#building
# AmgXwrapper	: See https://github.com/barbagroup/AmgXWrapper/blob/master/doc/install.md
AMGX_DIR=`dirname $1`
LIB=`basename $1`
ROOT=`pwd`
valgrind=$TRUST_ROOT/exec/valgrind/bin/valgrind
# ToDo: remonter dans configure de TRUST pour partage avec PETSc ?
for CUDA_LIB_PATH in $CUDA_ROOT/math_libs $CUDA_ROOT/../math_libs $CUDA_ROOT/../../math_libs
do
   [ -d $CUDA_LIB_PATH ] && export CUDA_LIB_PATH && CUDA_NVCC_FLAGS="-DCUDA_NVCC_FLAGS=-I$CUDA_LIB_PATH/include;--compiler-options;-L$CUDA_LIB_PATH/lib64 -fPIC" && break
done
# Fin ToDo
log=$ROOT/perf_$LIB.log && rm -f $log
rm -r -f $LIB
if [ $LIB = AmgX ]
then
   # Build
   cd $ROOT
   if [ "$TRUST_AMGX_COMMIT" != "" ]
   then
      commit=$TRUST_AMGX_COMMIT
      git clone https://github.com/NVIDIA/AMGX.git $LIB
      cd $LIB && git checkout $commit && cd -
      PACKAGE=$TRUST_ROOT/externalpackages/AmgX/$LIB"_"$commit.tar.gz
      tar cfz $PACKAGE --exclude .git $LIB && echo "Creation du package $PACKAGE"
   else
      commit=6dba8067ca
      commit=v2.3.0
      tar xfz $TRUST_ROOT/externalpackages/AmgX/AmgX_$commit.tar.gz
   fi
   cd $LIB && mkdir -p build && cd build
   if [ "$TRUST_CC_BASE_EXTP" != "" ]
   then
      AMGX_COMPILERS="-DCMAKE_CXX_COMPILER=$TRUST_CC_BASE_EXTP -DCMAKE_CXX_FLAGS=-std=c++14 -DCMAKE_C_COMPILER=${TRUST_CC_BASE_EXTP%++}cc" # See https://github.com/NVIDIA/AMGX for compilers...
   else
      AMGX_COMPILERS="-DCMAKE_CXX_COMPILER=$TRUST_CC_BASE -DCMAKE_C_COMPILER=$TRUST_cc_BASE"
   fi
   # Sur jeanzay, $TRUST_MAKE plante (pas assez de memoire sur frontale?) donc on retente avec make:
   #-DCUDA_ARCH="60;70;80"
   cmake -Wno-dev $CUDA_NVCC_FLAGS -DCUDA_TOOLKIT_ROOT_DIR=$CUDA_ROOT -DAMGX_NO_RPATH=1 -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB $AMGX_COMPILERS -DCMAKE_CUDA_FLAGS_RELEASE="-DNDEBUG" .. || exit -1
   ($TRUST_MAKE || make) && make install && cp -f ../examples/matrix.mtx $AMGX_DIR/$LIB/lib/examples || exit -1
   make install && cp -f ../examples/matrix.mtx $AMGX_DIR/$LIB/lib/examples
   cd $ROOT && rm -r -f $LIB
fi
if [ $LIB = AmgXWrapper ]
then
   cd $ROOT
   if [ "$TRUST_AMGXWRAPPER_COMMIT" != "" ]
   then
      commit=$TRUST_AMGXWRAPPER_COMMIT
      git clone https://github.com/barbagroup/AmgXWrapper.git $LIB
      cd $LIB && git checkout $commit && cd -
      PACKAGE=$TRUST_ROOT/externalpackages/AmgX/$LIB"_"$commit.tar.gz
      tar cfz $PACKAGE --exclude .git $LIB && echo "Creation du package $PACKAGE"
   else
      commit=331eba32db693528749bd2c46158073079d80972
      tar xfz $TRUST_ROOT/externalpackages/AmgX/AmgXWrapper_$commit.tar.gz
   fi
   # Hack pour empecher le test des binaires qui ne marche pas cluster (un binaire PETSc compile avec CUDA plantera sur la frontale non gpu)
   sed -i "1,$ s?endif (\${\${runs}})??" AmgXWrapper/cmake-modules/FindPETSc.cmake
   sed -i "1,$ s?if (\${\${runs}})??"    AmgXWrapper/cmake-modules/FindPETSc.cmake
   cd $LIB && rm -r -f build && mkdir -p build && cd build
   BUILD=RELEASE
   #BUILD=DEBUG
   # On specifie CC et CXX:
   if [ "$TRUST_CC_BASE_EXTP" != "" ]
   then
      export CXX=$TRUST_CC_BASE_EXTP
      export CC=${CXX%++}cc
   else
      export CXX=$TRUST_CC
      export CC=$TRUST_cc
   fi
   CMAKE_FLAGS=" -DCUDA_DIR=$CUDA_ROOT -DAMGX_DIR=$AMGX_DIR/AmgX -DCMAKE_CUDA_HOST_COMPILER=$CC -DCMAKE_CUDA_FLAGS=-fPIC"
   export CXXFLAGS=-fPIC && [ "$TRUST_USE_OPENMP" = 1 ] && CXXFLAGS=$CXXFLAGS" -fopenmp"
   # cmake (meme recent, 3.20) pas foutu de detecter correctement le nvcc du HPC SDK (cannot find -lcudadevrt -lcudart_static):
   if [ "$NVHPC" != "" ] || [ "$NVCOMPILERS" != "" ]
   then
       # Sur orcus, besoin d'ajouter -L$CUDA_ROOT/../compilers/lib -lnvc -lnvcpumath avec 21.2 (undefined reference __pgi au link...)
       # echo "$CUDA_ROOT/bin/nvcc -L$CUDA_ROOT/../compilers/lib -lnvc -lnvcpumath -L$CUDA_ROOT/lib64 \$*" > nvcc && chmod +x nvcc && CMAKE_FLAGS=$CMAKE_FLAGS" -DCMAKE_CUDA_COMPILER=`pwd`/nvcc"
       echo "$CUDA_ROOT/bin/nvcc -L$CUDA_ROOT/lib64 \$*" > nvcc && chmod +x nvcc && CMAKE_FLAGS=$CMAKE_FLAGS" -DCMAKE_CUDA_COMPILER=`pwd`/nvcc"
   fi
   # Configure and build:
   cmake $CMAKE_FLAGS -DCMAKE_INSTALL_LIBDIR=lib64 -DCMAKE_INSTALL_PREFIX=$AMGX_DIR/$LIB -DCMAKE_BUILD_TYPE=$BUILD -DBUILD_SHARED_LIBS=OFF .. && $TRUST_MAKE
   [ $? != 0 ] && exit -1
   make install # Erreur sur la doc on ne fait pas de exit
   # Creation d'une librairie statique en plus de la dynamique libAmgXWrapper.so
   # ar cru $AMGX_DIR/$LIB/lib64/libAmgXWrapper_static.a CMakeFiles/AmgXWrapper.dir/src/*.o || exit -1
   # Test
   cd $AMGX_DIR/$LIB 
   rm -r -f example && mkdir -p example && cd example
   tests="poisson solveFromFiles"
   for test in $tests
   do
      sed -i "1,$ s?# include <petsctime.h>??g" $ROOT/AmgXWrapper/example/$test/src/solve.cpp || exit -1
      mkdir -p $test && cd $test && cp $ROOT/AmgXWrapper/example/$test/README.md .
      echo $CMAKE_FLAGS
      cmake $CMAKE_FLAGS $ROOT/AmgXWrapper/example/$test && $TRUST_MAKE || exit -1
      cd ..
   done
   cd $ROOT && rm -r -f $LIB # On efface les sources ?
fi
if [ -f $TRUST_ENV/card.log ] # On ne teste que si on peut lancer des calculs GPU
then
   # Ces tests doivent absolument marcher:
   ./test_$LIB.sh >> $log || exit -1
fi
exit 0
