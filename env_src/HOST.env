#!/bin/bash
################################
# Definition de la variable HOST
################################
export HOST=`hostname | awk -F. '{print $1}'`
HOST_OLD=$HOST
[ "${HOST#lumi}" != $HOST ] && HOST=cray-amd
[ "${HOST#CINES01}" != $HOST ] && HOST=cray-amd
[ "${HOST#CINES0[2-3]}" != $HOST ] && HOST=cines-nvidia
[ "${HOST#st[0-9][0-9]}" != $HOST ] && HOST=sagittarius
if [ "${HOST#irene}"     != $HOST ]
then
   HOST=irene-ccrt
   [ "`grep AMD /proc/cpuinfo`" ] && HOST=irene-amd-ccrt
   [ "`uname -m`" = aarch64 ]     && HOST=irene-arm-ccrt
fi
[ "${HOST#ceres3}"       != $HOST ] && HOST=ceres3
[ "${HOST#cobalt}"       != $HOST ] && HOST=cobalt
[ "${HOST#topaze}"       != $HOST ] && HOST=topaze
[ "${HOST#wn}"           != $HOST ] && HOST=csp-cssi
[ "${HOST#frontal-csp}"  != $HOST ] && HOST=csp-cssi
[ "${HOST#cristal}"      != $HOST ] && HOST=cristal
[ "${HOST#devel}"        != $HOST ] && HOST=plafrim
[ "${HOST#jean-zay}"     != $HOST ] && HOST=jean-zay
[ "${HOST#gutta}"        != $HOST ] && HOST=aar
[ "${HOST#grenx}"        != $HOST ] && HOST=aar
[ "${HOST#aar}"          != $HOST ] && HOST=aar
[ "${HOST#summer}"       != $HOST ] && HOST=summer
[ "${HOST#mezel}"        != $HOST ] && HOST=mezel
if [ "${HOST#login}"     != $HOST ]
then
   if [ "`hostname -A 2>/dev/null | grep orcuslogin`" != "" ]
   then
      HOST=orcus-intel && [ "`grep AMD /proc/cpuinfo`" ] && HOST=orcus-amd
   else
      HOST=occigen
   fi
fi
# New variable HOST for several build on the same HOST:
if [ "$WORKBASE" = "" ]
then
   export HOST_BUILD=""
else
   HOST_BUILD=`echo ${TRUST_ROOT%/TRUST} | awk -F$WORKBASE '{print $2}'`
   export HOST_BUILD=`echo ${HOST_BUILD%/TRUST_moved}`
fi
[ "$HOST_BUILD" = "" ] && HOST_BUILD=$HOST
##########################################
# Updating the TRUST_WITHOUT_HOST variable
# Test the existence of the HOST_*.sh file
########################################## 
if [ "$TRUST_WITHOUT_HOST" = 0 ]
then
   if [ "$TRUST_ROOT" != "" ]
   then
      [ ! -f $TRUST_ROOT/env/HOST_$HOST_BUILD.sh ] && export TRUST_WITHOUT_HOST=1
   else
      [ ! -f HOST_$HOST_BUILD.sh ] && export TRUST_WITHOUT_HOST=1
   fi
fi
###########################################
# On detecte ainsi les clusters avec reseau
# rapide qui doivent utiliser le MPI natif 
###########################################
if [ "$HOST" != "$HOST_OLD" ]
then
   export TRUST_MPI_NATIF=1
else
   export TRUST_MPI_NATIF=0
fi
