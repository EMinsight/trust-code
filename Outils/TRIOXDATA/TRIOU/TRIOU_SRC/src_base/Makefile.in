# Makefile.in generated by automake 1.11 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# --
# Copyright (C) CEA, EDF
# Author : Erwan ADAM (CEA)
# --

# --
# Previous declaration of PYTHON_LIST and RESOURCES_LIST
# since those variables can be used in developpers
# Makefile.am files

# --
# Copyright (C) CEA, EDF
# Author : Erwan ADAM (CEA)
# --
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
DIST_COMMON = $(pkgpython_PYTHON) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(top_srcdir)/xdata2salome/make_begin.am \
	$(top_srcdir)/xdata2salome/make_end.am
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
SOURCES =
DIST_SOURCES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(pkgpythondir)"
py_compile = $(top_srcdir)/py-compile
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
OMNIIDL = @OMNIIDL@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PYTHON = @PYTHON@
PYTHON_EXEC_PREFIX = @PYTHON_EXEC_PREFIX@
PYTHON_PLATFORM = @PYTHON_PLATFORM@
PYTHON_PREFIX = @PYTHON_PREFIX@
PYTHON_VERSION = @PYTHON_VERSION@
RELEASE = @RELEASE@
RUNSALOME = @RUNSALOME@
SALOME_KERNEL = @SALOME_KERNEL@
SALOME_KERNEL_MAJOR_VERSION = @SALOME_KERNEL_MAJOR_VERSION@
SALOME_KERNEL_VERSION = @SALOME_KERNEL_VERSION@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
XDATADIR = @XDATADIR@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
am__leading_dot = @am__leading_dot@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build_alias = @build_alias@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host_alias = @host_alias@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
pkgpyexecdir = @pkgpyexecdir@
pkgpythondir = @pkgpythondir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
pyexecdir = @pyexecdir@
pythondir = @pythondir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
xdata_ok = @xdata_ok@
PYTHON_LIST = $(PYTHON_SRC_LIST)
RESOURCES_LIST = Marche.data
comment = "****************************"
@SALOME_KERNEL_FALSE@XDATA_FILES_SRCDIR = 

# --
# XXX_xdata.py files
# --
@SALOME_KERNEL_TRUE@XDATA_FILES_SRCDIR = $(wildcard $(srcdir)/*_xdata.py)
XDATA_FILES_NOTDIR = $(notdir $(XDATA_FILES_SRCDIR))
XDATA_CATALOG_FILES = $(patsubst %_xdata.py, %Catalog.xml, $(XDATA_FILES_NOTDIR))
XDATA_IDL_DESCRIPTION_FILES = $(patsubst %_xdata.py, %_Description.idl, $(XDATA_FILES_NOTDIR))
XDATA_IDL_COMPONENT_FILES = $(patsubst %_xdata.py, %_Component.idl, $(XDATA_FILES_NOTDIR))
XDATA_PY_FILES = $(patsubst %_xdata.py, %.py, $(XDATA_FILES_NOTDIR)) \
	$(patsubst %_xdata.py, %GUI.py, $(XDATA_FILES_NOTDIR))
XDATA_EN_FILES = $(patsubst %_xdata.py, %_en.xml, $(XDATA_FILES_NOTDIR))
XDATA_SALOME_SHARED_MODULES_PY_FILES = $(patsubst %_xdata.py, %_shared_modules.py, $(XDATA_FILES_NOTDIR))

# ----
# Set the different python lists
# ----
PYTHON_FULL_LIST = $(notdir $(wildcard $(srcdir)/*.py))
PYTHON_TEST_LIST = $(notdir $(wildcard $(srcdir)/*test.py))
PYTHON_DOT_IN_LIST = $(patsubst %.in, %, $(notdir $(wildcard $(srcdir)/*.py.in)))
PYTHON_SRC_LIST = $(filter-out $(PYTHON_TEST_LIST) $(PYTHON_DOT_IN_LIST) $(XDATA_PY_FILES), $(PYTHON_FULL_LIST))

# ---------------------------------------------
# ---------------------------------------------
# all stuff to "make"
# ---------------------------------------------
# ---------------------------------------------

# ----
# Target to copy the python files in buildir/...
# ----
PYTHON_COPY_SITE = $(top_builddir)/lib/python$(PYTHON_VERSION)/site-packages/$(PACKAGE)
PYTHON_COPY_LIST = $(PYTHON_LIST:%=$(PYTHON_COPY_SITE)/%)

# --
# XXX_xdata.py gestion
# --
XDATA_ALL_FILES = $(strip \
	$(XDATA_CATALOG_FILES) \
	$(XDATA_IDL_DESCRIPTION_FILES) \
	$(XDATA_IDL_COMPONENT_FILES) \
	$(XDATA_PY_FILES) \
	$(XDATA_EN_FILES) \
	$(XDATA_SALOME_SHARED_MODULES_PY_FILES) \
	)

XDATA_RESOURCES = $(strip \
	$(XDATA_CATALOG_FILES) \
	$(XDATA_EN_FILES) \
	)


# ---------------------------------------------
# idl compilation
# ---------------------------------------------
IDL_LIST = $(notdir $(wildcard $(srcdir)/*.idl)) \
	$(XDATA_IDL_DESCRIPTION_FILES) $(XDATA_IDL_COMPONENT_FILES)
IDL_COMPILED = $(IDL_LIST:%.idl=.idls/%_idl.py)

# ---------------------------------------------
# unittest gestion
# copy files in $UNITTESTS_BUILD_SITE
# (Needed only for documentation)
# ---------------------------------------------
UNITTESTS_BUILD_SITE = $(top_builddir)/share/@PACKAGE@/unittests
UNITTESTS_SRCDIR_LIST = $(wildcard $(srcdir)/*test.py)
UNITTESTS_SITE_LIST = $(UNITTESTS_SRCDIR_LIST:$(srcdir)/%=$(UNITTESTS_BUILD_SITE)/%)

# ---------------------------------------------
# ---------------------------------------------
# all stuff to "make install"
# ---------------------------------------------
# ---------------------------------------------
pkgpython_PYTHON = $(PYTHON_LIST) $(XDATA_PY_FILES)

# -------------------------------------------------------------------
# target to copy resources files in $(SALOME_RESOURCES_INSTALL_DIR)
# -------------------------------------------------------------------
XDATA_MODULES = $(patsubst %_xdata.py, %, $(XDATA_FILES_NOTDIR))
XDATA_RESOURCES_INSTALL_DIRS = $(foreach var, $(XDATA_MODULES), $(var)_sep_$($(var)_RESOURCES_INSTALL_DIR).rid)
XDATA_RESOURCES_LISTS = $(foreach var, $(XDATA_MODULES), $(foreach aaa, $($(var)_RESOURCES_LIST), $($(var)_RESOURCES_INSTALL_DIR)_sep_$(aaa).rl))
SALOME_RESOURCES_INSTALL_DIR = $(prefix)/share/salome/resources
SALOME_RESOURCES_LIST = $(RESOURCES_LIST)
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/xdata2salome/make_begin.am $(top_srcdir)/xdata2salome/make_end.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-pkgpythonPYTHON: $(pkgpython_PYTHON)
	@$(NORMAL_INSTALL)
	test -z "$(pkgpythondir)" || $(MKDIR_P) "$(DESTDIR)$(pkgpythondir)"
	@list='$(pkgpython_PYTHON)'; dlist=; list2=; test -n "$(pkgpythondir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then b=; else b="$(srcdir)/"; fi; \
	  if test -f $$b$$p; then \
	    $(am__strip_dir) \
	    dlist="$$dlist $$f"; \
	    list2="$$list2 $$b$$p"; \
	  else :; fi; \
	done; \
	for file in $$list2; do echo $$file; done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(pkgpythondir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(pkgpythondir)" || exit $$?; \
	done || exit $$?; \
	if test -n "$$dlist"; then \
	  if test -z "$(DESTDIR)"; then \
	    PYTHON=$(PYTHON) $(py_compile) --basedir "$(pkgpythondir)" $$dlist; \
	  else \
	    PYTHON=$(PYTHON) $(py_compile) --destdir "$(DESTDIR)" --basedir "$(pkgpythondir)" $$dlist; \
	  fi; \
	else :; fi

uninstall-pkgpythonPYTHON:
	@$(NORMAL_UNINSTALL)
	@list='$(pkgpython_PYTHON)'; test -n "$(pkgpythondir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	filesc=`echo "$$files" | sed 's|$$|c|'`; \
	fileso=`echo "$$files" | sed 's|$$|o|'`; \
	echo " ( cd '$(DESTDIR)$(pkgpythondir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(pkgpythondir)" && rm -f $$files || exit $$?; \
	echo " ( cd '$(DESTDIR)$(pkgpythondir)' && rm -f" $$filesc ")"; \
	cd "$(DESTDIR)$(pkgpythondir)" && rm -f $$filesc || exit $$?; \
	echo " ( cd '$(DESTDIR)$(pkgpythondir)' && rm -f" $$fileso ")"; \
	cd "$(DESTDIR)$(pkgpythondir)" && rm -f $$fileso
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  dist-hook
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) check-local
check: check-am
all-am: Makefile all-local
installdirs:
	for dir in "$(DESTDIR)$(pkgpythondir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-data-local install-pkgpythonPYTHON
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-data-hook
install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-exec-local
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-hook
install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-pkgpythonPYTHON

.MAKE: check-am install-am install-data-am install-exec-am \
	install-strip

.PHONY: all all-am all-local check check-am check-local clean \
	clean-generic clean-local dist-hook distclean \
	distclean-generic distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am \
	install-data-hook install-data-local install-dvi \
	install-dvi-am install-exec install-exec-am install-exec-hook \
	install-exec-local install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-pkgpythonPYTHON install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am uninstall uninstall-am \
	uninstall-pkgpythonPYTHON


$(PYTHON_COPY_SITE):
	$(INSTALL) -d $@

$(PYTHON_COPY_LIST): $(PYTHON_COPY_SITE)/%: %
	cp -f $< $@

python_build_copy: $(PYTHON_COPY_SITE) $(PYTHON_COPY_LIST);

compil-xdata:
	@for f in X $(XDATA_FILES_NOTDIR) ; do \
	  if test $$f = X ; then continue ; fi ; \
	  cmd= ; \
	  cmd=$$cmd"import xdata2salome ; " ; \
	  cmd=$$cmd"xdata2salome.compile('$$f') ; " ; \
	  env PYTHONPATH=$(PYTHON_COPY_SITE):$(PYTHONPATH) python -c "$$cmd" || exit 1 ; \
	done

compil-idl: $(IDL_COMPILED) ;

$(IDL_COMPILED):.idls/%_idl.py:%.idl
	@if test "X$(OMNIIDL)" != "X" ; then \
	  if test "X$(SALOME_KERNEL)" != "X" ; then \
	    echo $< compilation ... ; \
	    cmd= ; \
	    cmd=$$cmd"import xdata2salome ; " ; \
	    cmd=$$cmd"xdata2salome.compileIdl('$<') ; " ; \
	    env top_srcdir=@top_srcdir@ PYTHONPATH=$(PYTHON_COPY_SITE):$(PYTHONPATH) python -c "$$cmd" || exit 1 ; \
	  fi ; \
	fi

export-unittests: $(UNITTESTS_BUILD_SITE) $(UNITTESTS_SITE_LIST);

$(UNITTESTS_BUILD_SITE):
	$(INSTALL) -d $@

$(UNITTESTS_SITE_LIST): $(UNITTESTS_BUILD_SITE)/%: $(srcdir)/%
	cp -f $< $@

# -----------------------------------------------------------------
# Automake "make" targets
# -----------------------------------------------------------------

all-local: $(ALL_LOCAL) python_build_copy export-unittests compil-xdata compil-idl $(ALL_LOCAL_FINAL)
	@echo $(comment) all-local

# ---------------------------------------------
# copy idl in $(prefix)/idl/salome
# copy idl compilation in $(pkgpythondir)
# ---------------------------------------------

install-idl: $(prefix)/idl/salome $(IDL_LIST:%=$(prefix)/idl/salome/%);

$(prefix)/idl/salome:
	$(INSTALL) -d $@

$(IDL_LIST:%=$(prefix)/idl/salome/%): $(prefix)/idl/salome/%: %
	cp -f $< $@

install-compiled-idl:
	@if test -d .idls ; then \
	  cp -rf .idls/* $(pkgpythondir)/. ;\
	fi

install-salome-resources: $(SALOME_RESOURCES_INSTALL_DIR) \
	$(SALOME_RESOURCES_LIST:%=$(SALOME_RESOURCES_INSTALL_DIR)/%) \
	$(XDATA_RESOURCES_INSTALL_DIRS) $(XDATA_RESOURCES_LISTS) ;

$(SALOME_RESOURCES_INSTALL_DIR):
	$(INSTALL) -d $@

$(SALOME_RESOURCES_LIST:%=$(SALOME_RESOURCES_INSTALL_DIR)/%): $(SALOME_RESOURCES_INSTALL_DIR)/%: %
	cp -rf $< $@

%.rid:
	@if test X = X ; then \
	  var=$@ ; \
	  var=$${var%.rid} ; \
	  module=`echo $$var | awk -F _sep_ '{print $$1}'` ; \
	  dir=`echo $$var | awk -F _sep_ '{print $$2}'` ; \
	  if test X$$dir = X ; then \
	    dir=$(SALOME_RESOURCES_INSTALL_DIR) ; \
	  fi ; \
	  mkdir -p $$dir ; \
	  cp -f $${module}Catalog.xml $$dir/. ; \
	  cp -f $${module}_en.xml $$dir/. ; \
	  for suffix in .png _icons.qm _msg_en.qm ; do \
	    f=$$module$$suffix ; \
	    if test -f $(srcdir)/$$f ; then \
	      fff=$(srcdir)/$$f ; \
	    else \
	      if test $(PACKAGE) = xdata ; then \
	        fff=$(top_srcdir)/src/XDATA2SALOME/XDATA$$suffix ; \
	      else \
	        fff=$(top_srcdir)/xdata2salome/XDATA$$suffix ; \
	      fi ; \
	    fi ; \
	    cp -f $$fff $$dir/$$f ; \
	  done ; \
	  target=$$dir ; \
	  cmd= ; \
	  cmd=$$cmd"import xdata2salome ; " ; \
	  cmd=$$cmd"xdata2salome.constructSalomeAppXml('$(prefix)', '$$target') ; " ; \
	  env PYTHONPATH=$(PYTHON_COPY_SITE):$(PYTHONPATH) python -c "$$cmd" || exit 1 ; \
	fi

%.rl:
	@if test X = X ; then \
	  var=$@ ; \
	  var=$${var%.rl} ; \
	  dir=`echo $$var | awk -F _sep_ '{print $$1}'` ; \
	  if test X$$dir = X ; then \
	    dir=$(SALOME_RESOURCES_INSTALL_DIR) ; \
	  fi ; \
	  f=`echo $$var | awk -F _sep_ '{print $$2}'` ; \
	  mkdir -p $$dir ; \
	  if test -e $$f ; then \
	    cp -rf $$f $$dir ; \
	  else \
	    cp -rf $(srcdir)/$$f $$dir ; \
	  fi ; \
	fi

# -------------------------------------------------------------------
# target to copy $(XDATA_SALOME_SHARED_MODULES_PY_FILES) files
# in $(pkgpythondir)/shared_modules
# -------------------------------------------------------------------

$(pkgpythondir)/shared_modules:
	$(INSTALL) -d $@

$(XDATA_SALOME_SHARED_MODULES_PY_FILES:%=$(pkgpythondir)/shared_modules/%): $(pkgpythondir)/shared_modules/%: %
	cp -f $< $@

install-salome-shared-modules-files: $(pkgpythondir)/shared_modules \
		 $(XDATA_SALOME_SHARED_MODULES_PY_FILES:%=$(pkgpythondir)/shared_modules/%)

# -----------------------------------------------------------------
# Automake "make install" targets
# -----------------------------------------------------------------

install-exec-local: $(INSTALL_EXEC_LOCAL)
	@echo $(comment) install-exec-local target

install-exec-hook: $(INSTALL_EXEC_HOOK)
	@echo $(comment) install-exec-hook target

install-data-local: $(INSTALL_DATA_LOCAL)
	@echo $(comment) install-data-local target

install-data-hook: $(INSTALL_DATA_HOOK) install-idl install-compiled-idl \
			install-salome-resources install-salome-shared-modules-files \
			$(INSTALL_DATA_HOOK_FINAL)
	@echo $(comment) install-data-hook target

# ---------------------------------------------
# ---------------------------------------------
# all stuff to "make check"
# ---------------------------------------------
# ---------------------------------------------

%test:
	@echo -------------------------------
	@echo checking $@.py ...
	@echo -------------------------------
	$(RM) $@.pyc
	@if test X = X ; then \
	  diff $@.py $(srcdir)/$@.py > /dev/null 2>&1 ; \
	  if test $$? != 0 ; then \
	    cp -f $(srcdir)/$@.py . > /dev/null ; \
	  fi ; \
	  cmd='' ; \
	  cmd=$$cmd"env PYTHONPATH=$(pkgpythondir):$(PYTHONPATH)" ; \
	  for f in X $(XDATA_FILES_NOTDIR) ; do \
	    if test $$f = X ; then continue ; fi ; \
	    component_name=`basename $$f _xdata.py` ; \
	    cmd=$$cmd" "$$component_name"_ROOT_DIR="$(prefix) ; \
	  done ; \
	  cmd=$$cmd" python "$@".py" ; \
	  echo $$cmd ; \
	  eval $$cmd || exit 1 ; \
	fi

check-local:
	@echo $(comment) check-local target
# --
# CAUTION : it uses the PYTHON_TEST_LIST variable declared above
# in "make install" ...
# --
	@for f in X $(PYTHON_TEST_LIST) ; do \
	  if test $$f = X ; then continue ; fi ; \
	  ($(MAKE) `basename $$f .py`) || exit 1 ; \
	done

# ---------------------------------------------
# ---------------------------------------------
# all stuff to "make clean"
# ---------------------------------------------
# ---------------------------------------------

clean-local: $(CLEAN_LOCAL)
	@echo $(comment) clean-local target
	@$(RM) -r *.py *.pyc *.pyo *.xml *.idl .idls
	@$(RM) -r libSalomeTrace logger.log

# ---------------------------------------------
# ---------------------------------------------
# all stuff to "make dist"
# ---------------------------------------------
# ---------------------------------------------

dist-hook: $(DIST_HOOK)
	@echo $(comment) dist-hook target
# ---------------------------------------------
# distribute *test.py for make check to do something
# ---------------------------------------------
	for f in X $(PYTHON_TEST_LIST) ; do \
	    if test $$f = X ; then continue ; fi ; \
	    cp $(srcdir)/$$f $(distdir)/. ; \
	done
# ---------------------------------------------
# remove the generated $(XDATA_PY_FILES) of the distribution
# ---------------------------------------------
	for f in X $(XDATA_PY_FILES) ; do \
	    if test $$f = X ; then continue ; fi ; \
	    rm $(distdir)/$$f ; \
	done
# ---------------------------------------------
# remove the generated $(PYTHON_DOT_IN_LIST) of the distribution
# ---------------------------------------------
	for f in X $(PYTHON_DOT_IN_LIST) ; do \
	    if test $$f = X ; then continue ; fi ; \
	    rm $(distdir)/$$f ; \
	done

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
