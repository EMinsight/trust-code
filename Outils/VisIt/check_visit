#!/bin/bash
# check_visit est appele plusieurs fois par visit, on quitte apres le premier appel:
if [ "`echo $* | grep key`" = "" ]
then
   xdpyinfo=`\ls /usr/bin/xdpyinfo /usr/bin/X11/xdpyinfo 2>/dev/null | head -1`
   if [ "$xdpyinfo" != "" ]
   then
      result=`$xdpyinfo 2>/dev/null`
      # La commande existe
      if [ "$result" = "" ]
      then
	 # Affichage pas possible, DISPLAY ?
	 echo "DISPLAY not set?"
	 exit -1
      elif [ "`echo $result | grep -i glx`" = "" ]
      then
	 echo "Add GLX extension on your X server because VisIt can't run without it." && exit -1
      fi
   fi 
   verbose=0
   if [ $verbose = 1 ]
   then
      echo "########################################################################################"
      if [ "`ls $TRUST_ROOT/exec/VisIt/current/*/bin/engine_par 2>/dev/null`" != "" ]
      then
         if [ "`grep $HOST $TRUST_ROOT/Outils/VisIt/*.xml 2>/dev/null`" != "" ]
         then
	    echo "This version of VisIt is parallel on $HOST"
         elif [ "$1" != "-np" ]
         then
	    echo "You could run a parallel version of VisIt on $HOST with the command: visit -np $TRUST_NB_PROCS $*"
         fi
      elif [ "$1" = "-np" ]
      then
         echo "WARNING: You can't use -np with this SEQUENTIAL version of VisIt."
      fi
      echo "You can now visualize data on some remote host with menu File->Select/Open file...->Host" 
      echo "For that, your login on remote host should be configured in order that your local and remote TRUST versions match:"
      echo "ssh selected_host -n 'echo \$TRUST_VERSION' should return something like $TRUST_VERSION"
      echo "Else initialize TRUST v$TRUST_VERSION environment on the remote host by changing your ~/.profile file."
      echo "If you get the message: can't open master pty: /dev/ttyTfcan't open slave pty: -1"
      echo "Then relaunch visit with the -nopty option."
      echo "########################################################################################"
   fi
   # Chargement de l'environnement osmesa pour visit -win a distance:
   # On se base sur le test de glxinfo: 
   glxinfo 1>/dev/null 2>&1
   # Eventuellement test de l'acceleration Graphique
   #[ "`glxinfo 2>&1 | awk '/direct rendering:/ {print $NF}'`" = No ] && echo "Rendering non active." && exit
   # Test de performances avec glxgears 300->2000 FPS
   if [ $? != 0 ]
   then
      echo "Activating osmesa for VisIt off-screen..."
      if [ -f $TRUST_ROOT/exec/VisIt/osmesa/env_OSMesa.sh ]
      then
         source $TRUST_ROOT/exec/VisIt/osmesa/env_OSMesa.sh
      else
         echo "You may need to activate Osmesa for off-screen"
      fi
   fi
   # Ajout des librairies Qt5 de conda apres VisIt 2.12.1:
   [ ! -d $TRUST_ROOT/exec/VisIt/2.12.1 ] && export LD_LIBRARY_PATH=$TRUST_ROOT/exec/python/lib:$LD_LIBRARY_PATH
fi
