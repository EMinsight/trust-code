#!/bin/bash
################################
# Definition de la variable HOST
################################
export HOST=`hostname | awk -F. '{print $1}'`
HOST_OLD=$HOST
[ "${HOST#st}"          != $HOST ] && HOST=sagittarius
[ "${HOST#irene}"       != $HOST ] && HOST=irene-ccrt
[ "${HOST#cobalt}"      != $HOST ] && HOST=cobalt
[ "${HOST#callist}"     != $HOST ] && HOST=callisto
[ "${HOST#ceres2-}"     != $HOST ] && HOST=ceres2
[ "${HOST#login_}"      != $HOST ] && HOST=occigen
[ "${HOST#mezel}"       != $HOST ] && HOST=mezel
[ "${HOST#wn}"          != $HOST ] && HOST=csp-cssi
[ "${HOST#frontal-csp}" != $HOST ] && HOST=csp-cssi
[ "${HOST#cristal}"     != $HOST ] && HOST=cristal
[ "${HOST#login}"       != $HOST ] && HOST=orcus
# New variable HOST for several build on the same HOST:
if [ "$WORKBASE" = "" ]
then
   export HOST_BUILD=""
else
   export HOST_BUILD=`echo ${TRUST_ROOT%/TRUST} | awk -F$WORKBASE '{print $2}'`
fi
[ "$HOST_BUILD" = "" ] && HOST_BUILD=$HOST
##########################################
# Updating the TRUST_WITHOUT_HOST variable
# Test the existence of the HOST_*.sh file
########################################## 
if [ "$TRUST_WITHOUT_HOST" = 0 ]
then
   if [ "$TRUST_ROOT" != "" ]
   then
      [ ! -f $TRUST_ROOT/env/HOST_$HOST_BUILD.sh ] && export TRUST_WITHOUT_HOST=1
   else
      [ ! -f HOST_$HOST_BUILD.sh ] && export TRUST_WITHOUT_HOST=1
   fi
fi
###########################################
# On detecte ainsi les clusters avec reseau
# rapide qui doivent utiliser le MPI natif 
###########################################
if [ "$HOST" != "$HOST_OLD" ]
then
   export TRUST_MPI_NATIF=1
else
   export TRUST_MPI_NATIF=0
fi
